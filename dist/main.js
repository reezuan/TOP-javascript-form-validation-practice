(()=>{"use strict";var e={208:(e,n,t)=>{t.d(n,{A:()=>s});var a=t(354),i=t.n(a),r=t(314),o=t.n(r)()(i());o.push([e.id,"@import url(https://fonts.googleapis.com/css2?family=Bevan:ital@0;1&family=Inter:wght@100;200;300;400;500;600;700;800;900&family=Roboto:ital,wght@0,100;0,300;0,400;0,500;0,700;0,900;1,100;1,300;1,400;1,500;1,700;1,900&display=swap);"]),o.push([e.id,'html,\nbody {\n    width: 100%;\n    height: 100%;\n    background-color: #333;\n    font-family: Roboto, Helvetica, Arial, sans-serif;\n    font-size: 16px;\n}\n\n*,\n*::before,\n*::after {\n    box-sizing: border-box;\n    -moz-box-sizing: border-box;\n    -webkit-box-sizing: border-box;\n}\n\nbody {\n    display: flex;\n    justify-content: center;\n    align-items: center;\n}\n\nform {\n    border: 2px solid whitesmoke;\n    border-radius: 10px;\n    padding: 15px;\n    width: 300px;\n\n    display: flex;\n    flex-direction: column;\n    gap: 20px;\n}\n\nform > div {\n    display: flex;\n    flex-direction: column;\n}\n\nlabel {\n    color: whitesmoke;\n    font-size: 0.95rem;\n    margin-bottom: 5px;\n}\n\ninput {\n    padding: 5px 6px;\n    border-radius: 1px 1px 0 0;\n    border: none;\n}\n\ninput.empty {\n    background-color: lightcoral;\n}\n\nspan[data-error-type] {\n    background-color: maroon;\n    color: white;\n    border-radius: 0 0 10px 10px;\n    font-style: italic;\n    font-size: 0.75rem;\n}\n\nspan[data-error-type].active {\n    padding: 5px 6px;\n}\n\nbutton[type="submit"] {\n    font-family: Roboto, Helvetica, Arial, sans-serif;\n    font-size: 1.05rem;\n    padding: 8px 10px;\n    background-color: whitesmoke;\n    border: none;\n    border-radius: 7px;\n    margin-top: 10px;\n    cursor: pointer;\n}\n\n::placeholder {\n    color: white;\n}',"",{version:3,sources:["webpack://./src/style.css"],names:[],mappings:"AAEA;;IAEI,WAAW;IACX,YAAY;IACZ,sBAAsB;IACtB,iDAAiD;IACjD,eAAe;AACnB;;AAEA;;;IAGI,sBAAsB;IACtB,2BAA2B;IAC3B,8BAA8B;AAClC;;AAEA;IACI,aAAa;IACb,uBAAuB;IACvB,mBAAmB;AACvB;;AAEA;IACI,4BAA4B;IAC5B,mBAAmB;IACnB,aAAa;IACb,YAAY;;IAEZ,aAAa;IACb,sBAAsB;IACtB,SAAS;AACb;;AAEA;IACI,aAAa;IACb,sBAAsB;AAC1B;;AAEA;IACI,iBAAiB;IACjB,kBAAkB;IAClB,kBAAkB;AACtB;;AAEA;IACI,gBAAgB;IAChB,0BAA0B;IAC1B,YAAY;AAChB;;AAEA;IACI,4BAA4B;AAChC;;AAEA;IACI,wBAAwB;IACxB,YAAY;IACZ,4BAA4B;IAC5B,kBAAkB;IAClB,kBAAkB;AACtB;;AAEA;IACI,gBAAgB;AACpB;;AAEA;IACI,iDAAiD;IACjD,kBAAkB;IAClB,iBAAiB;IACjB,4BAA4B;IAC5B,YAAY;IACZ,kBAAkB;IAClB,gBAAgB;IAChB,eAAe;AACnB;;AAEA;IACI,YAAY;AAChB",sourcesContent:["@import url('https://fonts.googleapis.com/css2?family=Bevan:ital@0;1&family=Inter:wght@100;200;300;400;500;600;700;800;900&family=Roboto:ital,wght@0,100;0,300;0,400;0,500;0,700;0,900;1,100;1,300;1,400;1,500;1,700;1,900&display=swap');\n\nhtml,\nbody {\n    width: 100%;\n    height: 100%;\n    background-color: #333;\n    font-family: Roboto, Helvetica, Arial, sans-serif;\n    font-size: 16px;\n}\n\n*,\n*::before,\n*::after {\n    box-sizing: border-box;\n    -moz-box-sizing: border-box;\n    -webkit-box-sizing: border-box;\n}\n\nbody {\n    display: flex;\n    justify-content: center;\n    align-items: center;\n}\n\nform {\n    border: 2px solid whitesmoke;\n    border-radius: 10px;\n    padding: 15px;\n    width: 300px;\n\n    display: flex;\n    flex-direction: column;\n    gap: 20px;\n}\n\nform > div {\n    display: flex;\n    flex-direction: column;\n}\n\nlabel {\n    color: whitesmoke;\n    font-size: 0.95rem;\n    margin-bottom: 5px;\n}\n\ninput {\n    padding: 5px 6px;\n    border-radius: 1px 1px 0 0;\n    border: none;\n}\n\ninput.empty {\n    background-color: lightcoral;\n}\n\nspan[data-error-type] {\n    background-color: maroon;\n    color: white;\n    border-radius: 0 0 10px 10px;\n    font-style: italic;\n    font-size: 0.75rem;\n}\n\nspan[data-error-type].active {\n    padding: 5px 6px;\n}\n\nbutton[type=\"submit\"] {\n    font-family: Roboto, Helvetica, Arial, sans-serif;\n    font-size: 1.05rem;\n    padding: 8px 10px;\n    background-color: whitesmoke;\n    border: none;\n    border-radius: 7px;\n    margin-top: 10px;\n    cursor: pointer;\n}\n\n::placeholder {\n    color: white;\n}"],sourceRoot:""}]);const s=o},314:e=>{e.exports=function(e){var n=[];return n.toString=function(){return this.map((function(n){var t="",a=void 0!==n[5];return n[4]&&(t+="@supports (".concat(n[4],") {")),n[2]&&(t+="@media ".concat(n[2]," {")),a&&(t+="@layer".concat(n[5].length>0?" ".concat(n[5]):""," {")),t+=e(n),a&&(t+="}"),n[2]&&(t+="}"),n[4]&&(t+="}"),t})).join("")},n.i=function(e,t,a,i,r){"string"==typeof e&&(e=[[null,e,void 0]]);var o={};if(a)for(var s=0;s<this.length;s++){var d=this[s][0];null!=d&&(o[d]=!0)}for(var l=0;l<e.length;l++){var c=[].concat(e[l]);a&&o[c[0]]||(void 0!==r&&(void 0===c[5]||(c[1]="@layer".concat(c[5].length>0?" ".concat(c[5]):""," {").concat(c[1],"}")),c[5]=r),t&&(c[2]?(c[1]="@media ".concat(c[2]," {").concat(c[1],"}"),c[2]=t):c[2]=t),i&&(c[4]?(c[1]="@supports (".concat(c[4],") {").concat(c[1],"}"),c[4]=i):c[4]="".concat(i)),n.push(c))}},n}},354:e=>{e.exports=function(e){var n=e[1],t=e[3];if(!t)return n;if("function"==typeof btoa){var a=btoa(unescape(encodeURIComponent(JSON.stringify(t)))),i="sourceMappingURL=data:application/json;charset=utf-8;base64,".concat(a),r="/*# ".concat(i," */");return[n].concat([r]).join("\n")}return[n].join("\n")}},72:e=>{var n=[];function t(e){for(var t=-1,a=0;a<n.length;a++)if(n[a].identifier===e){t=a;break}return t}function a(e,a){for(var r={},o=[],s=0;s<e.length;s++){var d=e[s],l=a.base?d[0]+a.base:d[0],c=r[l]||0,u="".concat(l," ").concat(c);r[l]=c+1;var p=t(u),A={css:d[1],media:d[2],sourceMap:d[3],supports:d[4],layer:d[5]};if(-1!==p)n[p].references++,n[p].updater(A);else{var m=i(A,a);a.byIndex=s,n.splice(s,0,{identifier:u,updater:m,references:1})}o.push(u)}return o}function i(e,n){var t=n.domAPI(n);return t.update(e),function(n){if(n){if(n.css===e.css&&n.media===e.media&&n.sourceMap===e.sourceMap&&n.supports===e.supports&&n.layer===e.layer)return;t.update(e=n)}else t.remove()}}e.exports=function(e,i){var r=a(e=e||[],i=i||{});return function(e){e=e||[];for(var o=0;o<r.length;o++){var s=t(r[o]);n[s].references--}for(var d=a(e,i),l=0;l<r.length;l++){var c=t(r[l]);0===n[c].references&&(n[c].updater(),n.splice(c,1))}r=d}}},659:e=>{var n={};e.exports=function(e,t){var a=function(e){if(void 0===n[e]){var t=document.querySelector(e);if(window.HTMLIFrameElement&&t instanceof window.HTMLIFrameElement)try{t=t.contentDocument.head}catch(e){t=null}n[e]=t}return n[e]}(e);if(!a)throw new Error("Couldn't find a style target. This probably means that the value for the 'insert' parameter is invalid.");a.appendChild(t)}},540:e=>{e.exports=function(e){var n=document.createElement("style");return e.setAttributes(n,e.attributes),e.insert(n,e.options),n}},56:(e,n,t)=>{e.exports=function(e){var n=t.nc;n&&e.setAttribute("nonce",n)}},825:e=>{e.exports=function(e){if("undefined"==typeof document)return{update:function(){},remove:function(){}};var n=e.insertStyleElement(e);return{update:function(t){!function(e,n,t){var a="";t.supports&&(a+="@supports (".concat(t.supports,") {")),t.media&&(a+="@media ".concat(t.media," {"));var i=void 0!==t.layer;i&&(a+="@layer".concat(t.layer.length>0?" ".concat(t.layer):""," {")),a+=t.css,i&&(a+="}"),t.media&&(a+="}"),t.supports&&(a+="}");var r=t.sourceMap;r&&"undefined"!=typeof btoa&&(a+="\n/*# sourceMappingURL=data:application/json;base64,".concat(btoa(unescape(encodeURIComponent(JSON.stringify(r))))," */")),n.styleTagTransform(a,e,n.options)}(n,e,t)},remove:function(){!function(e){if(null===e.parentNode)return!1;e.parentNode.removeChild(e)}(n)}}}},113:e=>{e.exports=function(e,n){if(n.styleSheet)n.styleSheet.cssText=e;else{for(;n.firstChild;)n.removeChild(n.firstChild);n.appendChild(document.createTextNode(e))}}}},n={};function t(a){var i=n[a];if(void 0!==i)return i.exports;var r=n[a]={id:a,exports:{}};return e[a](r,r.exports,t),r.exports}t.n=e=>{var n=e&&e.__esModule?()=>e.default:()=>e;return t.d(n,{a:n}),n},t.d=(e,n)=>{for(var a in n)t.o(n,a)&&!t.o(e,a)&&Object.defineProperty(e,a,{enumerable:!0,get:n[a]})},t.o=(e,n)=>Object.prototype.hasOwnProperty.call(e,n),t.nc=void 0,(()=>{var e=t(72),n=t.n(e),a=t(825),i=t.n(a),r=t(659),o=t.n(r),s=t(56),d=t.n(s),l=t(540),c=t.n(l),u=t(113),p=t.n(u),A=t(208),m={};function h(e,n){const t=document.createElement("label");return t.setAttribute("for",e.getAttribute("id")),t.textContent=n,t}function f(e){const n=document.createElement("span");return n.setAttribute("data-error-type",e.getAttribute("id")),n}m.styleTagTransform=p(),m.setAttributes=d(),m.insert=o().bind(null,"head"),m.domAPI=i(),m.insertStyleElement=c(),n()(A.A,m),A.A&&A.A.locals&&A.A.locals,document.querySelector("body").appendChild(function(){const e=document.createElement("form");e.noValidate=!0;const n=document.createElement("div"),t=function(){const e=document.createElement("input");return e.setAttribute("type","email"),e.setAttribute("id","email"),e.setAttribute("name","email"),e.required=!0,e}(),a=f(t);n.appendChild(h(t,"Email")),n.appendChild(t),n.appendChild(a),t.addEventListener("focusout",(()=>{t.validity.typeMismatch?(a.className="active",a.textContent="Please enter a valid email address."):(a.className="",a.textContent="")}));const i=document.createElement("div"),r=function(){const e=document.createElement("input");return e.setAttribute("list","countries"),e.setAttribute("id","country"),e.setAttribute("name","country"),e.required=!0,e}(),o=function(){const e=document.createElement("datalist");return e.setAttribute("id","countries"),["Afghanistan","Albania","Algeria","American Samoa","Andorra","Angola","Anguilla","Antarctica","Antigua and Barbuda","Argentina","Armenia","Aruba","Australia","Austria","Azerbaijan","Bahamas (the)","Bahrain","Bangladesh","Barbados","Belarus","Belgium","Belize","Benin","Bermuda","Bhutan","Bolivia (Plurinational State of)","Bonaire, Sint Eustatius and Saba","Bosnia and Herzegovina","Botswana","Bouvet Island","Brazil","British Indian Ocean Territory (the)","Brunei Darussalam","Bulgaria","Burkina Faso","Burundi","Cabo Verde","Cambodia","Cameroon","Canada","Cayman Islands (the)","Central African Republic (the)","Chad","Chile","China","Christmas Island","Cocos (Keeling) Islands (the)","Colombia","Comoros (the)","Congo (the Democratic Republic of the)","Congo (the)","Cook Islands (the)","Costa Rica","Croatia","Cuba","Curaçao","Cyprus","Czechia","Côte d'Ivoire","Denmark","Djibouti","Dominica","Dominican Republic (the)","Ecuador","Egypt","El Salvador","Equatorial Guinea","Eritrea","Estonia","Eswatini","Ethiopia","Falkland Islands (the) [Malvinas]","Faroe Islands (the)","Fiji","Finland","France","French Guiana","French Polynesia","French Southern Territories (the)","Gabon","Gambia (the)","Georgia","Germany","Ghana","Gibraltar","Greece","Greenland","Grenada","Guadeloupe","Guam","Guatemala","Guernsey","Guinea","Guinea-Bissau","Guyana","Haiti","Heard Island and McDonald Islands","Holy See (the)","Honduras","Hong Kong","Hungary","Iceland","India","Indonesia","Iran (Islamic Republic of)","Iraq","Ireland","Isle of Man","Israel","Italy","Jamaica","Japan","Jersey","Jordan","Kazakhstan","Kenya","Kiribati","Korea (the Democratic People's Republic of)","Korea (the Republic of)","Kuwait","Kyrgyzstan","Lao People's Democratic Republic (the)","Latvia","Lebanon","Lesotho","Liberia","Libya","Liechtenstein","Lithuania","Luxembourg","Macao","Madagascar","Malawi","Malaysia","Maldives","Mali","Malta","Marshall Islands (the)","Martinique","Mauritania","Mauritius","Mayotte","Mexico","Micronesia (Federated States of)","Moldova (the Republic of)","Monaco","Mongolia","Montenegro","Montserrat","Morocco","Mozambique","Myanmar","Namibia","Nauru","Nepal","Netherlands (the)","New Caledonia","New Zealand","Nicaragua","Niger (the)","Nigeria","Niue","Norfolk Island","Northern Mariana Islands (the)","Norway","Oman","Pakistan","Palau","Palestine, State of","Panama","Papua New Guinea","Paraguay","Peru","Philippines (the)","Pitcairn","Poland","Portugal","Puerto Rico","Qatar","Republic of North Macedonia","Romania","Russian Federation (the)","Rwanda","Réunion","Saint Barthélemy","Saint Helena, Ascension and Tristan da Cunha","Saint Kitts and Nevis","Saint Lucia","Saint Martin (French part)","Saint Pierre and Miquelon","Saint Vincent and the Grenadines","Samoa","San Marino","Sao Tome and Principe","Saudi Arabia","Senegal","Serbia","Seychelles","Sierra Leone","Singapore","Sint Maarten (Dutch part)","Slovakia","Slovenia","Solomon Islands","Somalia","South Africa","South Georgia and the South Sandwich Islands","South Sudan","Spain","Sri Lanka","Sudan (the)","Suriname","Svalbard and Jan Mayen","Sweden","Switzerland","Syrian Arab Republic","Taiwan","Tajikistan","Tanzania, United Republic of","Thailand","Timor-Leste","Togo","Tokelau","Tonga","Trinidad and Tobago","Tunisia","Turkey","Turkmenistan","Turks and Caicos Islands (the)","Tuvalu","Uganda","Ukraine","United Arab Emirates (the)","United Kingdom of Great Britain and Northern Ireland (the)","United States Minor Outlying Islands (the)","United States of America (the)","Uruguay","Uzbekistan","Vanuatu","Venezuela (Bolivarian Republic of)","Viet Nam","Virgin Islands (British)","Virgin Islands (U.S.)","Wallis and Futuna","Western Sahara","Yemen","Zambia","Zimbabwe","Åland Islands"].forEach((n=>{const t=document.createElement("option");t.setAttribute("value",n),e.appendChild(t)})),e}(),s=f(r);i.appendChild(h(r,"Country")),i.appendChild(r),i.appendChild(o),i.appendChild(s),r.addEventListener("focusout",(()=>{const e=[];document.querySelectorAll("datalist#countries > option").forEach((n=>{e.push(n.getAttribute("value"))})),e.includes(r.value)||""===r.value?(s.className="",s.textContent=""):(s.className="active",s.textContent="Please choose a country from the list.")}));const d=document.createElement("div"),l=function(){const e=document.createElement("input");return e.setAttribute("type","tel"),e.setAttribute("id","postal-code"),e.setAttribute("name","postal-code"),e.required=!0,e}(),c=f(l);d.appendChild(h(l,"Postal code")),d.appendChild(l),d.appendChild(c),l.setAttribute("pattern","\\d\\d\\d\\d\\d\\d"),l.addEventListener("focusout",(()=>{l.validity.patternMismatch?(c.className="active",c.textContent="Please enter a 6-digit postal code."):(c.className="",c.textContent="")}));const u=document.createElement("div"),p=function(){const e=document.createElement("input");return e.setAttribute("type","password"),e.setAttribute("id","password"),e.setAttribute("name","password"),e.required=!0,e}(),A=f(p);u.appendChild(h(p,"Password")),u.appendChild(p),u.appendChild(A);const m=document.createElement("div"),b=function(){const e=document.createElement("input");return e.setAttribute("type","password"),e.setAttribute("id","confirm-password"),e.setAttribute("name","confirm-password"),e.required=!0,e}(),C=f(b);m.appendChild(h(b,"Confirm password")),m.appendChild(b),m.appendChild(C),p.addEventListener("focusout",(()=>{""!==b.value&&b.value!==p.value?(C.className="active",C.textContent="The passwords don't match."):(C.className="",C.textContent="")})),b.addEventListener("focusout",(()=>{b.value!==p.value&&""!==b.value?(C.className="active",C.textContent="The passwords don't match."):(C.className="",C.textContent="")}));const g=function(e){const n=document.createElement("button");return n.setAttribute("type","submit"),n.textContent="Sign up",n}();return e.addEventListener("submit",(n=>{e.checkValidity()||(n.preventDefault(),g.closest("form").querySelectorAll("input").forEach((e=>{e.validity.valueMissing&&(e.className="empty",e.setAttribute("placeholder","Required"))})))})),e.appendChild(n),e.appendChild(i),e.appendChild(d),e.appendChild(u),e.appendChild(m),e.appendChild(g),e}())})()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,