(()=>{"use strict";var e={208:(e,n,a)=>{a.d(n,{A:()=>s});var t=a(354),i=a.n(t),r=a(314),o=a.n(r)()(i());o.push([e.id,"@import url(https://fonts.googleapis.com/css2?family=Bevan:ital@0;1&family=Inter:wght@100;200;300;400;500;600;700;800;900&family=Roboto:ital,wght@0,100;0,300;0,400;0,500;0,700;0,900;1,100;1,300;1,400;1,500;1,700;1,900&display=swap);"]),o.push([e.id,"html,\nbody {\n    width: 100%;\n    height: 100%;\n    background-color: #333;\n    font-family: Roboto, Helvetica, Arial, sans-serif;\n}\n\n*,\n*::before,\n*::after {\n    box-sizing: border-box;\n    -moz-box-sizing: border-box;\n    -webkit-box-sizing: border-box;\n}\n\nbody {\n    display: flex;\n    justify-content: center;\n    align-items: center;\n}\n\nform {\n    border: 2px solid whitesmoke;\n    border-radius: 10px;\n    padding: 15px;\n\n    display: flex;\n    flex-direction: column;\n    gap: 20px;\n}\n\nform > div {\n    display: flex;\n    flex-direction: column;\n    gap: 4px;\n}\n\nlabel {\n    color: whitesmoke;\n}\n\ninput {\n    padding: 5px 6px;\n}\n\ninput:invalid {\n    background-color: coral;\n}","",{version:3,sources:["webpack://./src/style.css"],names:[],mappings:"AAEA;;IAEI,WAAW;IACX,YAAY;IACZ,sBAAsB;IACtB,iDAAiD;AACrD;;AAEA;;;IAGI,sBAAsB;IACtB,2BAA2B;IAC3B,8BAA8B;AAClC;;AAEA;IACI,aAAa;IACb,uBAAuB;IACvB,mBAAmB;AACvB;;AAEA;IACI,4BAA4B;IAC5B,mBAAmB;IACnB,aAAa;;IAEb,aAAa;IACb,sBAAsB;IACtB,SAAS;AACb;;AAEA;IACI,aAAa;IACb,sBAAsB;IACtB,QAAQ;AACZ;;AAEA;IACI,iBAAiB;AACrB;;AAEA;IACI,gBAAgB;AACpB;;AAEA;IACI,uBAAuB;AAC3B",sourcesContent:["@import url('https://fonts.googleapis.com/css2?family=Bevan:ital@0;1&family=Inter:wght@100;200;300;400;500;600;700;800;900&family=Roboto:ital,wght@0,100;0,300;0,400;0,500;0,700;0,900;1,100;1,300;1,400;1,500;1,700;1,900&display=swap');\n\nhtml,\nbody {\n    width: 100%;\n    height: 100%;\n    background-color: #333;\n    font-family: Roboto, Helvetica, Arial, sans-serif;\n}\n\n*,\n*::before,\n*::after {\n    box-sizing: border-box;\n    -moz-box-sizing: border-box;\n    -webkit-box-sizing: border-box;\n}\n\nbody {\n    display: flex;\n    justify-content: center;\n    align-items: center;\n}\n\nform {\n    border: 2px solid whitesmoke;\n    border-radius: 10px;\n    padding: 15px;\n\n    display: flex;\n    flex-direction: column;\n    gap: 20px;\n}\n\nform > div {\n    display: flex;\n    flex-direction: column;\n    gap: 4px;\n}\n\nlabel {\n    color: whitesmoke;\n}\n\ninput {\n    padding: 5px 6px;\n}\n\ninput:invalid {\n    background-color: coral;\n}"],sourceRoot:""}]);const s=o},314:e=>{e.exports=function(e){var n=[];return n.toString=function(){return this.map((function(n){var a="",t=void 0!==n[5];return n[4]&&(a+="@supports (".concat(n[4],") {")),n[2]&&(a+="@media ".concat(n[2]," {")),t&&(a+="@layer".concat(n[5].length>0?" ".concat(n[5]):""," {")),a+=e(n),t&&(a+="}"),n[2]&&(a+="}"),n[4]&&(a+="}"),a})).join("")},n.i=function(e,a,t,i,r){"string"==typeof e&&(e=[[null,e,void 0]]);var o={};if(t)for(var s=0;s<this.length;s++){var l=this[s][0];null!=l&&(o[l]=!0)}for(var d=0;d<e.length;d++){var u=[].concat(e[d]);t&&o[u[0]]||(void 0!==r&&(void 0===u[5]||(u[1]="@layer".concat(u[5].length>0?" ".concat(u[5]):""," {").concat(u[1],"}")),u[5]=r),a&&(u[2]?(u[1]="@media ".concat(u[2]," {").concat(u[1],"}"),u[2]=a):u[2]=a),i&&(u[4]?(u[1]="@supports (".concat(u[4],") {").concat(u[1],"}"),u[4]=i):u[4]="".concat(i)),n.push(u))}},n}},354:e=>{e.exports=function(e){var n=e[1],a=e[3];if(!a)return n;if("function"==typeof btoa){var t=btoa(unescape(encodeURIComponent(JSON.stringify(a)))),i="sourceMappingURL=data:application/json;charset=utf-8;base64,".concat(t),r="/*# ".concat(i," */");return[n].concat([r]).join("\n")}return[n].join("\n")}},72:e=>{var n=[];function a(e){for(var a=-1,t=0;t<n.length;t++)if(n[t].identifier===e){a=t;break}return a}function t(e,t){for(var r={},o=[],s=0;s<e.length;s++){var l=e[s],d=t.base?l[0]+t.base:l[0],u=r[d]||0,c="".concat(d," ").concat(u);r[d]=u+1;var p=a(c),m={css:l[1],media:l[2],sourceMap:l[3],supports:l[4],layer:l[5]};if(-1!==p)n[p].references++,n[p].updater(m);else{var A=i(m,t);t.byIndex=s,n.splice(s,0,{identifier:c,updater:A,references:1})}o.push(c)}return o}function i(e,n){var a=n.domAPI(n);return a.update(e),function(n){if(n){if(n.css===e.css&&n.media===e.media&&n.sourceMap===e.sourceMap&&n.supports===e.supports&&n.layer===e.layer)return;a.update(e=n)}else a.remove()}}e.exports=function(e,i){var r=t(e=e||[],i=i||{});return function(e){e=e||[];for(var o=0;o<r.length;o++){var s=a(r[o]);n[s].references--}for(var l=t(e,i),d=0;d<r.length;d++){var u=a(r[d]);0===n[u].references&&(n[u].updater(),n.splice(u,1))}r=l}}},659:e=>{var n={};e.exports=function(e,a){var t=function(e){if(void 0===n[e]){var a=document.querySelector(e);if(window.HTMLIFrameElement&&a instanceof window.HTMLIFrameElement)try{a=a.contentDocument.head}catch(e){a=null}n[e]=a}return n[e]}(e);if(!t)throw new Error("Couldn't find a style target. This probably means that the value for the 'insert' parameter is invalid.");t.appendChild(a)}},540:e=>{e.exports=function(e){var n=document.createElement("style");return e.setAttributes(n,e.attributes),e.insert(n,e.options),n}},56:(e,n,a)=>{e.exports=function(e){var n=a.nc;n&&e.setAttribute("nonce",n)}},825:e=>{e.exports=function(e){if("undefined"==typeof document)return{update:function(){},remove:function(){}};var n=e.insertStyleElement(e);return{update:function(a){!function(e,n,a){var t="";a.supports&&(t+="@supports (".concat(a.supports,") {")),a.media&&(t+="@media ".concat(a.media," {"));var i=void 0!==a.layer;i&&(t+="@layer".concat(a.layer.length>0?" ".concat(a.layer):""," {")),t+=a.css,i&&(t+="}"),a.media&&(t+="}"),a.supports&&(t+="}");var r=a.sourceMap;r&&"undefined"!=typeof btoa&&(t+="\n/*# sourceMappingURL=data:application/json;base64,".concat(btoa(unescape(encodeURIComponent(JSON.stringify(r))))," */")),n.styleTagTransform(t,e,n.options)}(n,e,a)},remove:function(){!function(e){if(null===e.parentNode)return!1;e.parentNode.removeChild(e)}(n)}}}},113:e=>{e.exports=function(e,n){if(n.styleSheet)n.styleSheet.cssText=e;else{for(;n.firstChild;)n.removeChild(n.firstChild);n.appendChild(document.createTextNode(e))}}}},n={};function a(t){var i=n[t];if(void 0!==i)return i.exports;var r=n[t]={id:t,exports:{}};return e[t](r,r.exports,a),r.exports}a.n=e=>{var n=e&&e.__esModule?()=>e.default:()=>e;return a.d(n,{a:n}),n},a.d=(e,n)=>{for(var t in n)a.o(n,t)&&!a.o(e,t)&&Object.defineProperty(e,t,{enumerable:!0,get:n[t]})},a.o=(e,n)=>Object.prototype.hasOwnProperty.call(e,n),a.nc=void 0,(()=>{var e=a(72),n=a.n(e),t=a(825),i=a.n(t),r=a(659),o=a.n(r),s=a(56),l=a.n(s),d=a(540),u=a.n(d),c=a(113),p=a.n(c),m=a(208),A={};function h(e,n){const a=document.createElement("label");return a.setAttribute("for",e.getAttribute("id")),a.textContent=n,a}A.styleTagTransform=p(),A.setAttributes=l(),A.insert=o().bind(null,"head"),A.domAPI=i(),A.insertStyleElement=u(),n()(m.A,A),m.A&&m.A.locals&&m.A.locals,document.querySelector("body").appendChild(function(){const e=document.createElement("form");e.noValidate=!0;const n=document.createElement("div"),a=function(){const e=document.createElement("input");return e.setAttribute("type","email"),e.setAttribute("id","email"),e.setAttribute("name","email"),e}();n.appendChild(h(a,"Email")),n.appendChild(a),e.appendChild(n);const t=document.createElement("div"),i=function(){const e=document.createElement("input");return e.setAttribute("list","countries"),e.setAttribute("id","country"),e.setAttribute("name","country"),e}(),r=function(){const e=document.createElement("datalist");return e.setAttribute("id","countries"),["Afghanistan","Albania","Algeria","American Samoa","Andorra","Angola","Anguilla","Antarctica","Antigua and Barbuda","Argentina","Armenia","Aruba","Australia","Austria","Azerbaijan","Bahamas (the)","Bahrain","Bangladesh","Barbados","Belarus","Belgium","Belize","Benin","Bermuda","Bhutan","Bolivia (Plurinational State of)","Bonaire, Sint Eustatius and Saba","Bosnia and Herzegovina","Botswana","Bouvet Island","Brazil","British Indian Ocean Territory (the)","Brunei Darussalam","Bulgaria","Burkina Faso","Burundi","Cabo Verde","Cambodia","Cameroon","Canada","Cayman Islands (the)","Central African Republic (the)","Chad","Chile","China","Christmas Island","Cocos (Keeling) Islands (the)","Colombia","Comoros (the)","Congo (the Democratic Republic of the)","Congo (the)","Cook Islands (the)","Costa Rica","Croatia","Cuba","Curaçao","Cyprus","Czechia","Côte d'Ivoire","Denmark","Djibouti","Dominica","Dominican Republic (the)","Ecuador","Egypt","El Salvador","Equatorial Guinea","Eritrea","Estonia","Eswatini","Ethiopia","Falkland Islands (the) [Malvinas]","Faroe Islands (the)","Fiji","Finland","France","French Guiana","French Polynesia","French Southern Territories (the)","Gabon","Gambia (the)","Georgia","Germany","Ghana","Gibraltar","Greece","Greenland","Grenada","Guadeloupe","Guam","Guatemala","Guernsey","Guinea","Guinea-Bissau","Guyana","Haiti","Heard Island and McDonald Islands","Holy See (the)","Honduras","Hong Kong","Hungary","Iceland","India","Indonesia","Iran (Islamic Republic of)","Iraq","Ireland","Isle of Man","Israel","Italy","Jamaica","Japan","Jersey","Jordan","Kazakhstan","Kenya","Kiribati","Korea (the Democratic People's Republic of)","Korea (the Republic of)","Kuwait","Kyrgyzstan","Lao People's Democratic Republic (the)","Latvia","Lebanon","Lesotho","Liberia","Libya","Liechtenstein","Lithuania","Luxembourg","Macao","Madagascar","Malawi","Malaysia","Maldives","Mali","Malta","Marshall Islands (the)","Martinique","Mauritania","Mauritius","Mayotte","Mexico","Micronesia (Federated States of)","Moldova (the Republic of)","Monaco","Mongolia","Montenegro","Montserrat","Morocco","Mozambique","Myanmar","Namibia","Nauru","Nepal","Netherlands (the)","New Caledonia","New Zealand","Nicaragua","Niger (the)","Nigeria","Niue","Norfolk Island","Northern Mariana Islands (the)","Norway","Oman","Pakistan","Palau","Palestine, State of","Panama","Papua New Guinea","Paraguay","Peru","Philippines (the)","Pitcairn","Poland","Portugal","Puerto Rico","Qatar","Republic of North Macedonia","Romania","Russian Federation (the)","Rwanda","Réunion","Saint Barthélemy","Saint Helena, Ascension and Tristan da Cunha","Saint Kitts and Nevis","Saint Lucia","Saint Martin (French part)","Saint Pierre and Miquelon","Saint Vincent and the Grenadines","Samoa","San Marino","Sao Tome and Principe","Saudi Arabia","Senegal","Serbia","Seychelles","Sierra Leone","Singapore","Sint Maarten (Dutch part)","Slovakia","Slovenia","Solomon Islands","Somalia","South Africa","South Georgia and the South Sandwich Islands","South Sudan","Spain","Sri Lanka","Sudan (the)","Suriname","Svalbard and Jan Mayen","Sweden","Switzerland","Syrian Arab Republic","Taiwan","Tajikistan","Tanzania, United Republic of","Thailand","Timor-Leste","Togo","Tokelau","Tonga","Trinidad and Tobago","Tunisia","Turkey","Turkmenistan","Turks and Caicos Islands (the)","Tuvalu","Uganda","Ukraine","United Arab Emirates (the)","United Kingdom of Great Britain and Northern Ireland (the)","United States Minor Outlying Islands (the)","United States of America (the)","Uruguay","Uzbekistan","Vanuatu","Venezuela (Bolivarian Republic of)","Viet Nam","Virgin Islands (British)","Virgin Islands (U.S.)","Wallis and Futuna","Western Sahara","Yemen","Zambia","Zimbabwe","Åland Islands"].forEach((n=>{const a=document.createElement("option");a.setAttribute("value",n),e.appendChild(a)})),e}();t.appendChild(h(i,"Country")),t.appendChild(i),t.appendChild(r),e.appendChild(t);const o=document.createElement("div"),s=function(){const e=document.createElement("input");return e.setAttribute("type","tel"),e.setAttribute("id","postal-code"),e.setAttribute("name","postal-code"),e}();o.appendChild(h(s,"Postal code")),o.appendChild(s),e.appendChild(o);const l=document.createElement("div"),d=function(){const e=document.createElement("input");return e.setAttribute("type","password"),e.setAttribute("id","password"),e.setAttribute("name","password"),e}();l.appendChild(h(d,"Password")),l.appendChild(d),e.appendChild(l);const u=document.createElement("div"),c=function(){const e=document.createElement("input");return e.setAttribute("type","password"),e.setAttribute("id","confirm-password"),e.setAttribute("name","confirm-password"),e}();return u.appendChild(h(c,"Confirm password")),u.appendChild(c),e.appendChild(u),e}())})()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,