(()=>{"use strict";var n={208:(n,e,a)=>{a.d(e,{A:()=>s});var t=a(354),i=a.n(t),r=a(314),o=a.n(r)()(i());o.push([n.id,"@import url(https://fonts.googleapis.com/css2?family=Bevan:ital@0;1&family=Inter:wght@100;200;300;400;500;600;700;800;900&family=Roboto:ital,wght@0,100;0,300;0,400;0,500;0,700;0,900;1,100;1,300;1,400;1,500;1,700;1,900&display=swap);"]),o.push([n.id,'html,\nbody {\n    width: 100%;\n    height: 100%;\n    background-color: #333;\n    font-family: Roboto, Helvetica, Arial, sans-serif;\n    font-size: 16px;\n}\n\n*,\n*::before,\n*::after {\n    box-sizing: border-box;\n    -moz-box-sizing: border-box;\n    -webkit-box-sizing: border-box;\n}\n\nbody {\n    display: flex;\n    justify-content: center;\n    align-items: center;\n}\n\nform {\n    border: 2px solid whitesmoke;\n    border-radius: 10px;\n    padding: 15px;\n    width: 300px;\n\n    display: flex;\n    flex-direction: column;\n    gap: 20px;\n}\n\nform > div {\n    display: flex;\n    flex-direction: column;\n}\n\nlabel {\n    color: whitesmoke;\n    font-size: 0.95rem;\n    margin-bottom: 5px;\n}\n\ninput {\n    padding: 5px 6px;\n    border-radius: 1px 1px 0 0;\n    border: none;\n}\n\ninput:invalid {\n    background-color: coral;\n}\n\nspan[data-error-type] {\n    background-color: maroon;\n    color: white;\n    border-radius: 0 0 10px 10px;\n    font-style: italic;\n    font-size: 0.75rem;\n}\n\nspan[data-error-type].active {\n    padding: 4px 6px;\n}\n\nbutton[type="submit"] {\n    font-family: Roboto, Helvetica, Arial, sans-serif;\n    font-size: 1.05rem;\n    padding: 8px 10px;\n    background-color: whitesmoke;\n    border: none;\n    border-radius: 7px;\n    margin-top: 10px;\n    cursor: pointer;\n}',"",{version:3,sources:["webpack://./src/style.css"],names:[],mappings:"AAEA;;IAEI,WAAW;IACX,YAAY;IACZ,sBAAsB;IACtB,iDAAiD;IACjD,eAAe;AACnB;;AAEA;;;IAGI,sBAAsB;IACtB,2BAA2B;IAC3B,8BAA8B;AAClC;;AAEA;IACI,aAAa;IACb,uBAAuB;IACvB,mBAAmB;AACvB;;AAEA;IACI,4BAA4B;IAC5B,mBAAmB;IACnB,aAAa;IACb,YAAY;;IAEZ,aAAa;IACb,sBAAsB;IACtB,SAAS;AACb;;AAEA;IACI,aAAa;IACb,sBAAsB;AAC1B;;AAEA;IACI,iBAAiB;IACjB,kBAAkB;IAClB,kBAAkB;AACtB;;AAEA;IACI,gBAAgB;IAChB,0BAA0B;IAC1B,YAAY;AAChB;;AAEA;IACI,uBAAuB;AAC3B;;AAEA;IACI,wBAAwB;IACxB,YAAY;IACZ,4BAA4B;IAC5B,kBAAkB;IAClB,kBAAkB;AACtB;;AAEA;IACI,gBAAgB;AACpB;;AAEA;IACI,iDAAiD;IACjD,kBAAkB;IAClB,iBAAiB;IACjB,4BAA4B;IAC5B,YAAY;IACZ,kBAAkB;IAClB,gBAAgB;IAChB,eAAe;AACnB",sourcesContent:["@import url('https://fonts.googleapis.com/css2?family=Bevan:ital@0;1&family=Inter:wght@100;200;300;400;500;600;700;800;900&family=Roboto:ital,wght@0,100;0,300;0,400;0,500;0,700;0,900;1,100;1,300;1,400;1,500;1,700;1,900&display=swap');\n\nhtml,\nbody {\n    width: 100%;\n    height: 100%;\n    background-color: #333;\n    font-family: Roboto, Helvetica, Arial, sans-serif;\n    font-size: 16px;\n}\n\n*,\n*::before,\n*::after {\n    box-sizing: border-box;\n    -moz-box-sizing: border-box;\n    -webkit-box-sizing: border-box;\n}\n\nbody {\n    display: flex;\n    justify-content: center;\n    align-items: center;\n}\n\nform {\n    border: 2px solid whitesmoke;\n    border-radius: 10px;\n    padding: 15px;\n    width: 300px;\n\n    display: flex;\n    flex-direction: column;\n    gap: 20px;\n}\n\nform > div {\n    display: flex;\n    flex-direction: column;\n}\n\nlabel {\n    color: whitesmoke;\n    font-size: 0.95rem;\n    margin-bottom: 5px;\n}\n\ninput {\n    padding: 5px 6px;\n    border-radius: 1px 1px 0 0;\n    border: none;\n}\n\ninput:invalid {\n    background-color: coral;\n}\n\nspan[data-error-type] {\n    background-color: maroon;\n    color: white;\n    border-radius: 0 0 10px 10px;\n    font-style: italic;\n    font-size: 0.75rem;\n}\n\nspan[data-error-type].active {\n    padding: 4px 6px;\n}\n\nbutton[type=\"submit\"] {\n    font-family: Roboto, Helvetica, Arial, sans-serif;\n    font-size: 1.05rem;\n    padding: 8px 10px;\n    background-color: whitesmoke;\n    border: none;\n    border-radius: 7px;\n    margin-top: 10px;\n    cursor: pointer;\n}"],sourceRoot:""}]);const s=o},314:n=>{n.exports=function(n){var e=[];return e.toString=function(){return this.map((function(e){var a="",t=void 0!==e[5];return e[4]&&(a+="@supports (".concat(e[4],") {")),e[2]&&(a+="@media ".concat(e[2]," {")),t&&(a+="@layer".concat(e[5].length>0?" ".concat(e[5]):""," {")),a+=n(e),t&&(a+="}"),e[2]&&(a+="}"),e[4]&&(a+="}"),a})).join("")},e.i=function(n,a,t,i,r){"string"==typeof n&&(n=[[null,n,void 0]]);var o={};if(t)for(var s=0;s<this.length;s++){var d=this[s][0];null!=d&&(o[d]=!0)}for(var l=0;l<n.length;l++){var u=[].concat(n[l]);t&&o[u[0]]||(void 0!==r&&(void 0===u[5]||(u[1]="@layer".concat(u[5].length>0?" ".concat(u[5]):""," {").concat(u[1],"}")),u[5]=r),a&&(u[2]?(u[1]="@media ".concat(u[2]," {").concat(u[1],"}"),u[2]=a):u[2]=a),i&&(u[4]?(u[1]="@supports (".concat(u[4],") {").concat(u[1],"}"),u[4]=i):u[4]="".concat(i)),e.push(u))}},e}},354:n=>{n.exports=function(n){var e=n[1],a=n[3];if(!a)return e;if("function"==typeof btoa){var t=btoa(unescape(encodeURIComponent(JSON.stringify(a)))),i="sourceMappingURL=data:application/json;charset=utf-8;base64,".concat(t),r="/*# ".concat(i," */");return[e].concat([r]).join("\n")}return[e].join("\n")}},72:n=>{var e=[];function a(n){for(var a=-1,t=0;t<e.length;t++)if(e[t].identifier===n){a=t;break}return a}function t(n,t){for(var r={},o=[],s=0;s<n.length;s++){var d=n[s],l=t.base?d[0]+t.base:d[0],u=r[l]||0,c="".concat(l," ").concat(u);r[l]=u+1;var p=a(c),A={css:d[1],media:d[2],sourceMap:d[3],supports:d[4],layer:d[5]};if(-1!==p)e[p].references++,e[p].updater(A);else{var m=i(A,t);t.byIndex=s,e.splice(s,0,{identifier:c,updater:m,references:1})}o.push(c)}return o}function i(n,e){var a=e.domAPI(e);return a.update(n),function(e){if(e){if(e.css===n.css&&e.media===n.media&&e.sourceMap===n.sourceMap&&e.supports===n.supports&&e.layer===n.layer)return;a.update(n=e)}else a.remove()}}n.exports=function(n,i){var r=t(n=n||[],i=i||{});return function(n){n=n||[];for(var o=0;o<r.length;o++){var s=a(r[o]);e[s].references--}for(var d=t(n,i),l=0;l<r.length;l++){var u=a(r[l]);0===e[u].references&&(e[u].updater(),e.splice(u,1))}r=d}}},659:n=>{var e={};n.exports=function(n,a){var t=function(n){if(void 0===e[n]){var a=document.querySelector(n);if(window.HTMLIFrameElement&&a instanceof window.HTMLIFrameElement)try{a=a.contentDocument.head}catch(n){a=null}e[n]=a}return e[n]}(n);if(!t)throw new Error("Couldn't find a style target. This probably means that the value for the 'insert' parameter is invalid.");t.appendChild(a)}},540:n=>{n.exports=function(n){var e=document.createElement("style");return n.setAttributes(e,n.attributes),n.insert(e,n.options),e}},56:(n,e,a)=>{n.exports=function(n){var e=a.nc;e&&n.setAttribute("nonce",e)}},825:n=>{n.exports=function(n){if("undefined"==typeof document)return{update:function(){},remove:function(){}};var e=n.insertStyleElement(n);return{update:function(a){!function(n,e,a){var t="";a.supports&&(t+="@supports (".concat(a.supports,") {")),a.media&&(t+="@media ".concat(a.media," {"));var i=void 0!==a.layer;i&&(t+="@layer".concat(a.layer.length>0?" ".concat(a.layer):""," {")),t+=a.css,i&&(t+="}"),a.media&&(t+="}"),a.supports&&(t+="}");var r=a.sourceMap;r&&"undefined"!=typeof btoa&&(t+="\n/*# sourceMappingURL=data:application/json;base64,".concat(btoa(unescape(encodeURIComponent(JSON.stringify(r))))," */")),e.styleTagTransform(t,n,e.options)}(e,n,a)},remove:function(){!function(n){if(null===n.parentNode)return!1;n.parentNode.removeChild(n)}(e)}}}},113:n=>{n.exports=function(n,e){if(e.styleSheet)e.styleSheet.cssText=n;else{for(;e.firstChild;)e.removeChild(e.firstChild);e.appendChild(document.createTextNode(n))}}}},e={};function a(t){var i=e[t];if(void 0!==i)return i.exports;var r=e[t]={id:t,exports:{}};return n[t](r,r.exports,a),r.exports}a.n=n=>{var e=n&&n.__esModule?()=>n.default:()=>n;return a.d(e,{a:e}),e},a.d=(n,e)=>{for(var t in e)a.o(e,t)&&!a.o(n,t)&&Object.defineProperty(n,t,{enumerable:!0,get:e[t]})},a.o=(n,e)=>Object.prototype.hasOwnProperty.call(n,e),a.nc=void 0,(()=>{var n=a(72),e=a.n(n),t=a(825),i=a.n(t),r=a(659),o=a.n(r),s=a(56),d=a.n(s),l=a(540),u=a.n(l),c=a(113),p=a.n(c),A=a(208),m={};function h(n,e){const a=document.createElement("label");return a.setAttribute("for",n.getAttribute("id")),a.textContent=e,a}function b(n){const e=document.createElement("span");return e.setAttribute("data-error-type",n.getAttribute("id")),e}m.styleTagTransform=p(),m.setAttributes=d(),m.insert=o().bind(null,"head"),m.domAPI=i(),m.insertStyleElement=u(),e()(A.A,m),A.A&&A.A.locals&&A.A.locals,document.querySelector("body").appendChild(function(){const n=document.createElement("form");n.noValidate=!0;const e=document.createElement("div"),a=function(){const n=document.createElement("input");return n.setAttribute("type","email"),n.setAttribute("id","email"),n.setAttribute("name","email"),n}();e.appendChild(h(a,"Email")),e.appendChild(a),e.appendChild(b(a));const t=document.createElement("div"),i=function(){const n=document.createElement("input");return n.setAttribute("list","countries"),n.setAttribute("id","country"),n.setAttribute("name","country"),n}(),r=function(){const n=document.createElement("datalist");return n.setAttribute("id","countries"),["Afghanistan","Albania","Algeria","American Samoa","Andorra","Angola","Anguilla","Antarctica","Antigua and Barbuda","Argentina","Armenia","Aruba","Australia","Austria","Azerbaijan","Bahamas (the)","Bahrain","Bangladesh","Barbados","Belarus","Belgium","Belize","Benin","Bermuda","Bhutan","Bolivia (Plurinational State of)","Bonaire, Sint Eustatius and Saba","Bosnia and Herzegovina","Botswana","Bouvet Island","Brazil","British Indian Ocean Territory (the)","Brunei Darussalam","Bulgaria","Burkina Faso","Burundi","Cabo Verde","Cambodia","Cameroon","Canada","Cayman Islands (the)","Central African Republic (the)","Chad","Chile","China","Christmas Island","Cocos (Keeling) Islands (the)","Colombia","Comoros (the)","Congo (the Democratic Republic of the)","Congo (the)","Cook Islands (the)","Costa Rica","Croatia","Cuba","Curaçao","Cyprus","Czechia","Côte d'Ivoire","Denmark","Djibouti","Dominica","Dominican Republic (the)","Ecuador","Egypt","El Salvador","Equatorial Guinea","Eritrea","Estonia","Eswatini","Ethiopia","Falkland Islands (the) [Malvinas]","Faroe Islands (the)","Fiji","Finland","France","French Guiana","French Polynesia","French Southern Territories (the)","Gabon","Gambia (the)","Georgia","Germany","Ghana","Gibraltar","Greece","Greenland","Grenada","Guadeloupe","Guam","Guatemala","Guernsey","Guinea","Guinea-Bissau","Guyana","Haiti","Heard Island and McDonald Islands","Holy See (the)","Honduras","Hong Kong","Hungary","Iceland","India","Indonesia","Iran (Islamic Republic of)","Iraq","Ireland","Isle of Man","Israel","Italy","Jamaica","Japan","Jersey","Jordan","Kazakhstan","Kenya","Kiribati","Korea (the Democratic People's Republic of)","Korea (the Republic of)","Kuwait","Kyrgyzstan","Lao People's Democratic Republic (the)","Latvia","Lebanon","Lesotho","Liberia","Libya","Liechtenstein","Lithuania","Luxembourg","Macao","Madagascar","Malawi","Malaysia","Maldives","Mali","Malta","Marshall Islands (the)","Martinique","Mauritania","Mauritius","Mayotte","Mexico","Micronesia (Federated States of)","Moldova (the Republic of)","Monaco","Mongolia","Montenegro","Montserrat","Morocco","Mozambique","Myanmar","Namibia","Nauru","Nepal","Netherlands (the)","New Caledonia","New Zealand","Nicaragua","Niger (the)","Nigeria","Niue","Norfolk Island","Northern Mariana Islands (the)","Norway","Oman","Pakistan","Palau","Palestine, State of","Panama","Papua New Guinea","Paraguay","Peru","Philippines (the)","Pitcairn","Poland","Portugal","Puerto Rico","Qatar","Republic of North Macedonia","Romania","Russian Federation (the)","Rwanda","Réunion","Saint Barthélemy","Saint Helena, Ascension and Tristan da Cunha","Saint Kitts and Nevis","Saint Lucia","Saint Martin (French part)","Saint Pierre and Miquelon","Saint Vincent and the Grenadines","Samoa","San Marino","Sao Tome and Principe","Saudi Arabia","Senegal","Serbia","Seychelles","Sierra Leone","Singapore","Sint Maarten (Dutch part)","Slovakia","Slovenia","Solomon Islands","Somalia","South Africa","South Georgia and the South Sandwich Islands","South Sudan","Spain","Sri Lanka","Sudan (the)","Suriname","Svalbard and Jan Mayen","Sweden","Switzerland","Syrian Arab Republic","Taiwan","Tajikistan","Tanzania, United Republic of","Thailand","Timor-Leste","Togo","Tokelau","Tonga","Trinidad and Tobago","Tunisia","Turkey","Turkmenistan","Turks and Caicos Islands (the)","Tuvalu","Uganda","Ukraine","United Arab Emirates (the)","United Kingdom of Great Britain and Northern Ireland (the)","United States Minor Outlying Islands (the)","United States of America (the)","Uruguay","Uzbekistan","Vanuatu","Venezuela (Bolivarian Republic of)","Viet Nam","Virgin Islands (British)","Virgin Islands (U.S.)","Wallis and Futuna","Western Sahara","Yemen","Zambia","Zimbabwe","Åland Islands"].forEach((e=>{const a=document.createElement("option");a.setAttribute("value",e),n.appendChild(a)})),n}();t.appendChild(h(i,"Country")),t.appendChild(i),t.appendChild(r),t.appendChild(b(i));const o=document.createElement("div"),s=function(){const n=document.createElement("input");return n.setAttribute("type","tel"),n.setAttribute("id","postal-code"),n.setAttribute("name","postal-code"),n}();o.appendChild(h(s,"Postal code")),o.appendChild(s),o.appendChild(b(s));const d=document.createElement("div"),l=function(){const n=document.createElement("input");return n.setAttribute("type","password"),n.setAttribute("id","password"),n.setAttribute("name","password"),n}();d.appendChild(h(l,"Password")),d.appendChild(l),d.appendChild(b(l));const u=document.createElement("div"),c=function(){const n=document.createElement("input");return n.setAttribute("type","password"),n.setAttribute("id","confirm-password"),n.setAttribute("name","confirm-password"),n}(),p=b(c);u.appendChild(h(c,"Confirm password")),u.appendChild(c),u.appendChild(p),c.addEventListener("focusout",(()=>{c.value!==l.value?(p.className="active",p.textContent="The passwords don't match."):c.value===l.value&&(p.className="",p.textContent="")})),n.appendChild(e),n.appendChild(t),n.appendChild(o),n.appendChild(d),n.appendChild(u);const A=function(n){const e=document.createElement("button");return e.setAttribute("type","submit"),e.textContent="Sign up",e}();return n.appendChild(A),n}())})()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibWFpbi5qcyIsIm1hcHBpbmdzIjoid0ZBR0lBLEUsTUFBMEIsR0FBNEIsS0FDMURBLEVBQXdCQyxLQUFLLENBQUNDLEVBQU9DLEdBQUksNk9BRXpDSCxFQUF3QkMsS0FBSyxDQUFDQyxFQUFPQyxHQUFJLGswQ0E0RXJDLEdBQUcsQ0FBQyxRQUFVLEVBQUUsUUFBVSxDQUFDLDZCQUE2QixNQUFRLEdBQUcsU0FBVywrbUJBQSttQixlQUFpQixDQUFDLG1qREFBbWpELFdBQWEsTUFFbnhFLFMsVUM5RUFELEVBQU9FLFFBQVUsU0FBVUMsR0FDekIsSUFBSUMsRUFBTyxHQTRFWCxPQXpFQUEsRUFBS0MsU0FBVyxXQUNkLE9BQU9DLEtBQUtDLEtBQUksU0FBVUMsR0FDeEIsSUFBSUMsRUFBVSxHQUNWQyxPQUErQixJQUFaRixFQUFLLEdBb0I1QixPQW5CSUEsRUFBSyxLQUNQQyxHQUFXLGNBQWNFLE9BQU9ILEVBQUssR0FBSSxRQUV2Q0EsRUFBSyxLQUNQQyxHQUFXLFVBQVVFLE9BQU9ILEVBQUssR0FBSSxPQUVuQ0UsSUFDRkQsR0FBVyxTQUFTRSxPQUFPSCxFQUFLLEdBQUdJLE9BQVMsRUFBSSxJQUFJRCxPQUFPSCxFQUFLLElBQU0sR0FBSSxPQUU1RUMsR0FBV04sRUFBdUJLLEdBQzlCRSxJQUNGRCxHQUFXLEtBRVRELEVBQUssS0FDUEMsR0FBVyxLQUVURCxFQUFLLEtBQ1BDLEdBQVcsS0FFTkEsQ0FDVCxJQUFHSSxLQUFLLEdBQ1YsRUFHQVQsRUFBS1UsRUFBSSxTQUFXQyxFQUFTQyxFQUFPQyxFQUFRQyxFQUFVQyxHQUM3QixpQkFBWkosSUFDVEEsRUFBVSxDQUFDLENBQUMsS0FBTUEsT0FBU0ssS0FFN0IsSUFBSUMsRUFBeUIsQ0FBQyxFQUM5QixHQUFJSixFQUNGLElBQUssSUFBSUssRUFBSSxFQUFHQSxFQUFJaEIsS0FBS00sT0FBUVUsSUFBSyxDQUNwQyxJQUFJckIsRUFBS0ssS0FBS2dCLEdBQUcsR0FDUCxNQUFOckIsSUFDRm9CLEVBQXVCcEIsSUFBTSxFQUVqQyxDQUVGLElBQUssSUFBSXNCLEVBQUssRUFBR0EsRUFBS1IsRUFBUUgsT0FBUVcsSUFBTSxDQUMxQyxJQUFJZixFQUFPLEdBQUdHLE9BQU9JLEVBQVFRLElBQ3pCTixHQUFVSSxFQUF1QmIsRUFBSyxXQUdyQixJQUFWVyxTQUNjLElBQVpYLEVBQUssS0FHZEEsRUFBSyxHQUFLLFNBQVNHLE9BQU9ILEVBQUssR0FBR0ksT0FBUyxFQUFJLElBQUlELE9BQU9ILEVBQUssSUFBTSxHQUFJLE1BQU1HLE9BQU9ILEVBQUssR0FBSSxNQUYvRkEsRUFBSyxHQUFLVyxHQU1WSCxJQUNHUixFQUFLLElBR1JBLEVBQUssR0FBSyxVQUFVRyxPQUFPSCxFQUFLLEdBQUksTUFBTUcsT0FBT0gsRUFBSyxHQUFJLEtBQzFEQSxFQUFLLEdBQUtRLEdBSFZSLEVBQUssR0FBS1EsR0FNVkUsSUFDR1YsRUFBSyxJQUdSQSxFQUFLLEdBQUssY0FBY0csT0FBT0gsRUFBSyxHQUFJLE9BQU9HLE9BQU9ILEVBQUssR0FBSSxLQUMvREEsRUFBSyxHQUFLVSxHQUhWVixFQUFLLEdBQUssR0FBR0csT0FBT08sSUFNeEJkLEVBQUtMLEtBQUtTLEdBQ1osQ0FDRixFQUNPSixDQUNULEMsVUNsRkFKLEVBQU9FLFFBQVUsU0FBVU0sR0FDekIsSUFBSUMsRUFBVUQsRUFBSyxHQUNmZ0IsRUFBYWhCLEVBQUssR0FDdEIsSUFBS2dCLEVBQ0gsT0FBT2YsRUFFVCxHQUFvQixtQkFBVGdCLEtBQXFCLENBQzlCLElBQUlDLEVBQVNELEtBQUtFLFNBQVNDLG1CQUFtQkMsS0FBS0MsVUFBVU4sTUFDekRPLEVBQU8sK0RBQStEcEIsT0FBT2UsR0FDN0VNLEVBQWdCLE9BQU9yQixPQUFPb0IsRUFBTSxPQUN4QyxNQUFPLENBQUN0QixHQUFTRSxPQUFPLENBQUNxQixJQUFnQm5CLEtBQUssS0FDaEQsQ0FDQSxNQUFPLENBQUNKLEdBQVNJLEtBQUssS0FDeEIsQyxTQ2JBLElBQUlvQixFQUFjLEdBQ2xCLFNBQVNDLEVBQXFCQyxHQUU1QixJQURBLElBQUlDLEdBQVUsRUFDTHRCLEVBQUksRUFBR0EsRUFBSW1CLEVBQVlyQixPQUFRRSxJQUN0QyxHQUFJbUIsRUFBWW5CLEdBQUdxQixhQUFlQSxFQUFZLENBQzVDQyxFQUFTdEIsRUFDVCxLQUNGLENBRUYsT0FBT3NCLENBQ1QsQ0FDQSxTQUFTQyxFQUFhakMsRUFBTWtDLEdBRzFCLElBRkEsSUFBSUMsRUFBYSxDQUFDLEVBQ2RDLEVBQWMsR0FDVDFCLEVBQUksRUFBR0EsRUFBSVYsRUFBS1EsT0FBUUUsSUFBSyxDQUNwQyxJQUFJTixFQUFPSixFQUFLVSxHQUNaYixFQUFLcUMsRUFBUUcsS0FBT2pDLEVBQUssR0FBSzhCLEVBQVFHLEtBQU9qQyxFQUFLLEdBQ2xEa0MsRUFBUUgsRUFBV3RDLElBQU8sRUFDMUJrQyxFQUFhLEdBQUd4QixPQUFPVixFQUFJLEtBQUtVLE9BQU8rQixHQUMzQ0gsRUFBV3RDLEdBQU15QyxFQUFRLEVBQ3pCLElBQUlDLEVBQW9CVCxFQUFxQkMsR0FDekNTLEVBQU0sQ0FDUkMsSUFBS3JDLEVBQUssR0FDVlEsTUFBT1IsRUFBSyxHQUNac0MsVUFBV3RDLEVBQUssR0FDaEJVLFNBQVVWLEVBQUssR0FDZlcsTUFBT1gsRUFBSyxJQUVkLElBQTJCLElBQXZCbUMsRUFDRlYsRUFBWVUsR0FBbUJJLGFBQy9CZCxFQUFZVSxHQUFtQkssUUFBUUosT0FDbEMsQ0FDTCxJQUFJSSxFQUFVQyxFQUFnQkwsRUFBS04sR0FDbkNBLEVBQVFZLFFBQVVwQyxFQUNsQm1CLEVBQVlrQixPQUFPckMsRUFBRyxFQUFHLENBQ3ZCcUIsV0FBWUEsRUFDWmEsUUFBU0EsRUFDVEQsV0FBWSxHQUVoQixDQUNBUCxFQUFZekMsS0FBS29DLEVBQ25CLENBQ0EsT0FBT0ssQ0FDVCxDQUNBLFNBQVNTLEVBQWdCTCxFQUFLTixHQUM1QixJQUFJYyxFQUFNZCxFQUFRZSxPQUFPZixHQVl6QixPQVhBYyxFQUFJRSxPQUFPVixHQUNHLFNBQWlCVyxHQUM3QixHQUFJQSxFQUFRLENBQ1YsR0FBSUEsRUFBT1YsTUFBUUQsRUFBSUMsS0FBT1UsRUFBT3ZDLFFBQVU0QixFQUFJNUIsT0FBU3VDLEVBQU9ULFlBQWNGLEVBQUlFLFdBQWFTLEVBQU9yQyxXQUFhMEIsRUFBSTFCLFVBQVlxQyxFQUFPcEMsUUFBVXlCLEVBQUl6QixNQUN6SixPQUVGaUMsRUFBSUUsT0FBT1YsRUFBTVcsRUFDbkIsTUFDRUgsRUFBSUksUUFFUixDQUVGLENBQ0F4RCxFQUFPRSxRQUFVLFNBQVVFLEVBQU1rQyxHQUcvQixJQUFJbUIsRUFBa0JwQixFQUR0QmpDLEVBQU9BLEdBQVEsR0FEZmtDLEVBQVVBLEdBQVcsQ0FBQyxHQUd0QixPQUFPLFNBQWdCb0IsR0FDckJBLEVBQVVBLEdBQVcsR0FDckIsSUFBSyxJQUFJNUMsRUFBSSxFQUFHQSxFQUFJMkMsRUFBZ0I3QyxPQUFRRSxJQUFLLENBQy9DLElBQ0k2QyxFQUFRekIsRUFES3VCLEVBQWdCM0MsSUFFakNtQixFQUFZMEIsR0FBT1osWUFDckIsQ0FFQSxJQURBLElBQUlhLEVBQXFCdkIsRUFBYXFCLEVBQVNwQixHQUN0Q3VCLEVBQUssRUFBR0EsRUFBS0osRUFBZ0I3QyxPQUFRaUQsSUFBTSxDQUNsRCxJQUNJQyxFQUFTNUIsRUFES3VCLEVBQWdCSSxJQUVLLElBQW5DNUIsRUFBWTZCLEdBQVFmLGFBQ3RCZCxFQUFZNkIsR0FBUWQsVUFDcEJmLEVBQVlrQixPQUFPVyxFQUFRLEdBRS9CLENBQ0FMLEVBQWtCRyxDQUNwQixDQUNGLEMsVUNqRkEsSUFBSUcsRUFBTyxDQUFDLEVBK0JaL0QsRUFBT0UsUUFQUCxTQUEwQjhELEVBQVFDLEdBQ2hDLElBQUlDLEVBdEJOLFNBQW1CQSxHQUNqQixRQUE0QixJQUFqQkgsRUFBS0csR0FBeUIsQ0FDdkMsSUFBSUMsRUFBY0MsU0FBU0MsY0FBY0gsR0FHekMsR0FBSUksT0FBT0MsbUJBQXFCSixhQUF1QkcsT0FBT0Msa0JBQzVELElBR0VKLEVBQWNBLEVBQVlLLGdCQUFnQkMsSUFDNUMsQ0FBRSxNQUFPQyxHQUVQUCxFQUFjLElBQ2hCLENBRUZKLEVBQUtHLEdBQVVDLENBQ2pCLENBQ0EsT0FBT0osRUFBS0csRUFDZCxDQUllUyxDQUFVWCxHQUN2QixJQUFLRSxFQUNILE1BQU0sSUFBSVUsTUFBTSwyR0FFbEJWLEVBQU9XLFlBQVlaLEVBQ3JCLEMsVUN2QkFqRSxFQUFPRSxRQU5QLFNBQTRCb0MsR0FDMUIsSUFBSXdDLEVBQVVWLFNBQVNXLGNBQWMsU0FHckMsT0FGQXpDLEVBQVEwQyxjQUFjRixFQUFTeEMsRUFBUTJDLFlBQ3ZDM0MsRUFBUTBCLE9BQU9jLEVBQVN4QyxFQUFRQSxTQUN6QndDLENBQ1QsQyxlQ0NBOUUsRUFBT0UsUUFOUCxTQUF3Q2dGLEdBQ3RDLElBQUlDLEVBQW1ELEtBQ25EQSxHQUNGRCxFQUFhRSxhQUFhLFFBQVNELEVBRXZDLEMsVUNvREFuRixFQUFPRSxRQWpCUCxTQUFnQm9DLEdBQ2QsR0FBd0Isb0JBQWI4QixTQUNULE1BQU8sQ0FDTGQsT0FBUSxXQUFtQixFQUMzQkUsT0FBUSxXQUFtQixHQUcvQixJQUFJMEIsRUFBZTVDLEVBQVErQyxtQkFBbUIvQyxHQUM5QyxNQUFPLENBQ0xnQixPQUFRLFNBQWdCVixJQWpENUIsU0FBZXNDLEVBQWM1QyxFQUFTTSxHQUNwQyxJQUFJQyxFQUFNLEdBQ05ELEVBQUkxQixXQUNOMkIsR0FBTyxjQUFjbEMsT0FBT2lDLEVBQUkxQixTQUFVLFFBRXhDMEIsRUFBSTVCLFFBQ042QixHQUFPLFVBQVVsQyxPQUFPaUMsRUFBSTVCLE1BQU8sT0FFckMsSUFBSU4sT0FBaUMsSUFBZGtDLEVBQUl6QixNQUN2QlQsSUFDRm1DLEdBQU8sU0FBU2xDLE9BQU9pQyxFQUFJekIsTUFBTVAsT0FBUyxFQUFJLElBQUlELE9BQU9pQyxFQUFJekIsT0FBUyxHQUFJLE9BRTVFMEIsR0FBT0QsRUFBSUMsSUFDUG5DLElBQ0ZtQyxHQUFPLEtBRUxELEVBQUk1QixRQUNONkIsR0FBTyxLQUVMRCxFQUFJMUIsV0FDTjJCLEdBQU8sS0FFVCxJQUFJQyxFQUFZRixFQUFJRSxVQUNoQkEsR0FBNkIsb0JBQVRyQixPQUN0Qm9CLEdBQU8sdURBQXVEbEMsT0FBT2MsS0FBS0UsU0FBU0MsbUJBQW1CQyxLQUFLQyxVQUFVZ0IsTUFBZSxRQUt0SVIsRUFBUWdELGtCQUFrQnpDLEVBQUtxQyxFQUFjNUMsRUFBUUEsUUFDdkQsQ0FvQk1pRCxDQUFNTCxFQUFjNUMsRUFBU00sRUFDL0IsRUFDQVksT0FBUSxZQXJCWixTQUE0QjBCLEdBRTFCLEdBQWdDLE9BQTVCQSxFQUFhTSxXQUNmLE9BQU8sRUFFVE4sRUFBYU0sV0FBV0MsWUFBWVAsRUFDdEMsQ0FnQk1RLENBQW1CUixFQUNyQixFQUVKLEMsVUM5Q0FsRixFQUFPRSxRQVZQLFNBQTJCMkMsRUFBS3FDLEdBQzlCLEdBQUlBLEVBQWFTLFdBQ2ZULEVBQWFTLFdBQVdDLFFBQVUvQyxNQUM3QixDQUNMLEtBQU9xQyxFQUFhVyxZQUNsQlgsRUFBYU8sWUFBWVAsRUFBYVcsWUFFeENYLEVBQWFMLFlBQVlULFNBQVMwQixlQUFlakQsR0FDbkQsQ0FDRixDLEdDWElrRCxFQUEyQixDQUFDLEVBR2hDLFNBQVNDLEVBQW9CQyxHQUU1QixJQUFJQyxFQUFlSCxFQUF5QkUsR0FDNUMsUUFBcUI3RSxJQUFqQjhFLEVBQ0gsT0FBT0EsRUFBYWhHLFFBR3JCLElBQUlGLEVBQVMrRixFQUF5QkUsR0FBWSxDQUNqRGhHLEdBQUlnRyxFQUVKL0YsUUFBUyxDQUFDLEdBT1gsT0FIQWlHLEVBQW9CRixHQUFVakcsRUFBUUEsRUFBT0UsUUFBUzhGLEdBRy9DaEcsRUFBT0UsT0FDZixDQ3JCQThGLEVBQW9CSSxFQUFLcEcsSUFDeEIsSUFBSXFHLEVBQVNyRyxHQUFVQSxFQUFPc0csV0FDN0IsSUFBT3RHLEVBQWlCLFFBQ3hCLElBQU0sRUFFUCxPQURBZ0csRUFBb0JPLEVBQUVGLEVBQVEsQ0FBRUcsRUFBR0gsSUFDNUJBLENBQU0sRUNMZEwsRUFBb0JPLEVBQUksQ0FBQ3JHLEVBQVN1RyxLQUNqQyxJQUFJLElBQUlDLEtBQU9ELEVBQ1hULEVBQW9CVyxFQUFFRixFQUFZQyxLQUFTVixFQUFvQlcsRUFBRXpHLEVBQVN3RyxJQUM1RUUsT0FBT0MsZUFBZTNHLEVBQVN3RyxFQUFLLENBQUVJLFlBQVksRUFBTUMsSUFBS04sRUFBV0MsSUFFMUUsRUNORFYsRUFBb0JXLEVBQUksQ0FBQy9ELEVBQUtvRSxJQUFVSixPQUFPSyxVQUFVQyxlQUFlQyxLQUFLdkUsRUFBS29FLEdDQWxGaEIsRUFBb0JvQixRQUFLaEcsRSw2SENXckJrQixFQUFVLENBQUMsRUNYZixTQUFTK0UsRUFBV0MsRUFBY0MsR0FDOUIsTUFBTUYsRUFBYWpELFNBQVNXLGNBQWMsU0FLMUMsT0FIQXNDLEVBQVdqQyxhQUFhLE1BQU9rQyxFQUFhRSxhQUFhLE9BQ3pESCxFQUFXSSxZQUFjRixFQUVsQkYsQ0FDWCxDQ1BBLFNBQVNLLEVBQVVKLEdBQ2YsTUFBTUksRUFBWXRELFNBQVNXLGNBQWMsUUFFekMsT0FEQTJDLEVBQVV0QyxhQUFhLGtCQUFtQmtDLEVBQWFFLGFBQWEsT0FDN0RFLENBQ1gsQ0ZTQXBGLEVBQVFnRCxrQkFBb0IsSUFDNUJoRCxFQUFRMEMsY0FBZ0IsSUFDeEIxQyxFQUFRMEIsT0FBUyxTQUFjLEtBQU0sUUFDckMxQixFQUFRZSxPQUFTLElBQ2pCZixFQUFRK0MsbUJBQXFCLElBRWhCLElBQUksSUFBUy9DLEdBS0osS0FBVyxJQUFRcUYsUUFBUyxJQUFRQSxPR3BCdER2RCxTQUFTQyxjQUFjLFFBQVFRLFlDTW5DLFdBQ0ksTUFBTStDLEVBQU94RCxTQUFTVyxjQUFjLFFBQ3BDNkMsRUFBS0MsWUFBYSxFQUVsQixNQUFNQyxFQUFnQjFELFNBQVNXLGNBQWMsT0FDdkNnRCxFQ2ZWLFdBQ0ksTUFBTUMsRUFBYTVELFNBQVNXLGNBQWMsU0FNMUMsT0FKQWlELEVBQVc1QyxhQUFhLE9BQVEsU0FDaEM0QyxFQUFXNUMsYUFBYSxLQUFNLFNBQzlCNEMsRUFBVzVDLGFBQWEsT0FBUSxTQUV6QjRDLENBQ1gsQ0RPa0JBLEdBQ2RGLEVBQWNqRCxZQUFZd0MsRUFBV1UsRUFBTyxVQUM1Q0QsRUFBY2pELFlBQVlrRCxHQUMxQkQsRUFBY2pELFlBQVk2QyxFQUFVSyxJQUdwQyxNQUFNRSxFQUFrQjdELFNBQVNXLGNBQWMsT0FDekNtRCxFRXRCVixXQUNJLE1BQU1DLEVBQWUvRCxTQUFTVyxjQUFjLFNBTTVDLE9BSkFvRCxFQUFhL0MsYUFBYSxPQUFRLGFBQ2xDK0MsRUFBYS9DLGFBQWEsS0FBTSxXQUNoQytDLEVBQWEvQyxhQUFhLE9BQVEsV0FFM0IrQyxDQUNYLENGY29CQSxHQUNWQyxFR3ZCVixXQUNJLE1BQU1DLEVBQVdqRSxTQUFTVyxjQUFjLFlBcVF4QyxPQXBRQXNELEVBQVNqRCxhQUFhLEtBQU0sYUFFUCxDQUNqQixjQUNBLFVBQ0EsVUFDQSxpQkFDQSxVQUNBLFNBQ0EsV0FDQSxhQUNBLHNCQUNBLFlBQ0EsVUFDQSxRQUNBLFlBQ0EsVUFDQSxhQUNBLGdCQUNBLFVBQ0EsYUFDQSxXQUNBLFVBQ0EsVUFDQSxTQUNBLFFBQ0EsVUFDQSxTQUNBLG1DQUNBLG1DQUNBLHlCQUNBLFdBQ0EsZ0JBQ0EsU0FDQSx1Q0FDQSxvQkFDQSxXQUNBLGVBQ0EsVUFDQSxhQUNBLFdBQ0EsV0FDQSxTQUNBLHVCQUNBLGlDQUNBLE9BQ0EsUUFDQSxRQUNBLG1CQUNBLGdDQUNBLFdBQ0EsZ0JBQ0EseUNBQ0EsY0FDQSxxQkFDQSxhQUNBLFVBQ0EsT0FDQSxVQUNBLFNBQ0EsVUFDQSxnQkFDQSxVQUNBLFdBQ0EsV0FDQSwyQkFDQSxVQUNBLFFBQ0EsY0FDQSxvQkFDQSxVQUNBLFVBQ0EsV0FDQSxXQUNBLG9DQUNBLHNCQUNBLE9BQ0EsVUFDQSxTQUNBLGdCQUNBLG1CQUNBLG9DQUNBLFFBQ0EsZUFDQSxVQUNBLFVBQ0EsUUFDQSxZQUNBLFNBQ0EsWUFDQSxVQUNBLGFBQ0EsT0FDQSxZQUNBLFdBQ0EsU0FDQSxnQkFDQSxTQUNBLFFBQ0Esb0NBQ0EsaUJBQ0EsV0FDQSxZQUNBLFVBQ0EsVUFDQSxRQUNBLFlBQ0EsNkJBQ0EsT0FDQSxVQUNBLGNBQ0EsU0FDQSxRQUNBLFVBQ0EsUUFDQSxTQUNBLFNBQ0EsYUFDQSxRQUNBLFdBQ0EsOENBQ0EsMEJBQ0EsU0FDQSxhQUNBLHlDQUNBLFNBQ0EsVUFDQSxVQUNBLFVBQ0EsUUFDQSxnQkFDQSxZQUNBLGFBQ0EsUUFDQSxhQUNBLFNBQ0EsV0FDQSxXQUNBLE9BQ0EsUUFDQSx5QkFDQSxhQUNBLGFBQ0EsWUFDQSxVQUNBLFNBQ0EsbUNBQ0EsNEJBQ0EsU0FDQSxXQUNBLGFBQ0EsYUFDQSxVQUNBLGFBQ0EsVUFDQSxVQUNBLFFBQ0EsUUFDQSxvQkFDQSxnQkFDQSxjQUNBLFlBQ0EsY0FDQSxVQUNBLE9BQ0EsaUJBQ0EsaUNBQ0EsU0FDQSxPQUNBLFdBQ0EsUUFDQSxzQkFDQSxTQUNBLG1CQUNBLFdBQ0EsT0FDQSxvQkFDQSxXQUNBLFNBQ0EsV0FDQSxjQUNBLFFBQ0EsOEJBQ0EsVUFDQSwyQkFDQSxTQUNBLFVBQ0EsbUJBQ0EsK0NBQ0Esd0JBQ0EsY0FDQSw2QkFDQSw0QkFDQSxtQ0FDQSxRQUNBLGFBQ0Esd0JBQ0EsZUFDQSxVQUNBLFNBQ0EsYUFDQSxlQUNBLFlBQ0EsNEJBQ0EsV0FDQSxXQUNBLGtCQUNBLFVBQ0EsZUFDQSwrQ0FDQSxjQUNBLFFBQ0EsWUFDQSxjQUNBLFdBQ0EseUJBQ0EsU0FDQSxjQUNBLHVCQUNBLFNBQ0EsYUFDQSwrQkFDQSxXQUNBLGNBQ0EsT0FDQSxVQUNBLFFBQ0Esc0JBQ0EsVUFDQSxTQUNBLGVBQ0EsaUNBQ0EsU0FDQSxTQUNBLFVBQ0EsNkJBQ0EsNkRBQ0EsNkNBQ0EsaUNBQ0EsVUFDQSxhQUNBLFVBQ0EscUNBQ0EsV0FDQSwyQkFDQSx3QkFDQSxvQkFDQSxpQkFDQSxRQUNBLFNBQ0EsV0FDQSxpQkFHU2tELFNBQVFKLElBQ2pCLE1BQU1LLEVBQVNuRSxTQUFTVyxjQUFjLFVBQ3RDd0QsRUFBT25ELGFBQWEsUUFBUzhDLEdBQzdCRyxFQUFTeEQsWUFBWTBELEVBQU8sSUFHekJGLENBQ1gsQ0hoUDRCRyxHQUN4QlAsRUFBZ0JwRCxZQUFZd0MsRUFBV2EsRUFBUyxZQUNoREQsRUFBZ0JwRCxZQUFZcUQsR0FDNUJELEVBQWdCcEQsWUFBWXVELEdBQzVCSCxFQUFnQnBELFlBQVk2QyxFQUFVUSxJQUd0QyxNQUFNTyxFQUFnQnJFLFNBQVNXLGNBQWMsT0FDdkMyRCxFSS9CVixXQUNJLE1BQU1DLEVBQWtCdkUsU0FBU1csY0FBYyxTQU0vQyxPQUpBNEQsRUFBZ0J2RCxhQUFhLE9BQVEsT0FDckN1RCxFQUFnQnZELGFBQWEsS0FBTSxlQUNuQ3VELEVBQWdCdkQsYUFBYSxPQUFRLGVBRTlCdUQsQ0FDWCxDSnVCdUJBLEdBQ25CRixFQUFjNUQsWUFBWXdDLEVBQVdxQixFQUFZLGdCQUNqREQsRUFBYzVELFlBQVk2RCxHQUMxQkQsRUFBYzVELFlBQVk2QyxFQUFVZ0IsSUFHcEMsTUFBTUUsRUFBY3hFLFNBQVNXLGNBQWMsT0FDckM4RCxFS3RDVixXQUNJLE1BQU1DLEVBQWdCMUUsU0FBU1csY0FBYyxTQU03QyxPQUpBK0QsRUFBYzFELGFBQWEsT0FBUSxZQUNuQzBELEVBQWMxRCxhQUFhLEtBQU0sWUFDakMwRCxFQUFjMUQsYUFBYSxPQUFRLFlBRTVCMEQsQ0FDWCxDTDhCcUJBLEdBQ2pCRixFQUFZL0QsWUFBWXdDLEVBQVd3QixFQUFVLGFBQzdDRCxFQUFZL0QsWUFBWWdFLEdBQ3hCRCxFQUFZL0QsWUFBWTZDLEVBQVVtQixJQUlsQyxNQUFNRSxFQUFxQjNFLFNBQVNXLGNBQWMsT0FDNUNpRSxFTTlDVixXQUNJLE1BQU1DLEVBQXVCN0UsU0FBU1csY0FBYyxTQU1wRCxPQUpBa0UsRUFBcUI3RCxhQUFhLE9BQVEsWUFDMUM2RCxFQUFxQjdELGFBQWEsS0FBTSxvQkFDeEM2RCxFQUFxQjdELGFBQWEsT0FBUSxvQkFFbkM2RCxDQUNYLENOc0M0QkEsR0FDbEJDLEVBQXNCeEIsRUFBVXNCLEdBRXRDRCxFQUFtQmxFLFlBQVl3QyxFQUFXMkIsRUFBaUIscUJBQzNERCxFQUFtQmxFLFlBQVltRSxHQUMvQkQsRUFBbUJsRSxZQUFZcUUsR0FFL0JGLEVBQWdCRyxpQkFBaUIsWUFBWSxLQUNyQ0gsRUFBZ0JJLFFBQVVQLEVBQVNPLE9BQ25DRixFQUFvQkcsVUFBWSxTQUNoQ0gsRUFBb0J6QixZQUFjLDhCQUMzQnVCLEVBQWdCSSxRQUFVUCxFQUFTTyxRQUMxQ0YsRUFBb0JHLFVBQVksR0FDaENILEVBQW9CekIsWUFBYyxHQUN0QyxJQUlKRyxFQUFLL0MsWUFBWWlELEdBQ2pCRixFQUFLL0MsWUFBWW9ELEdBQ2pCTCxFQUFLL0MsWUFBWTRELEdBQ2pCYixFQUFLL0MsWUFBWStELEdBQ2pCaEIsRUFBSy9DLFlBQVlrRSxHQUVqQixNQUFNTyxFT3RFVixTQUFzQkMsR0FDbEIsTUFBTUMsRUFBZXBGLFNBQVNXLGNBQWMsVUFLNUMsT0FIQXlFLEVBQWFwRSxhQUFhLE9BQVEsVUFDbENvRSxFQUFhL0IsWVBrRWUsVU9oRXJCK0IsQ0FDWCxDUCtEbUJBLEdBR2YsT0FGQTVCLEVBQUsvQyxZQUFZeUUsR0FFVjFCLENBQ1gsQ0R0RStDLEciLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly90b3AtamF2YXNjcmlwdC1mb3JtLXZhbGlkYXRpb24tcHJhY3RpY2UvLi9zcmMvc3R5bGUuY3NzIiwid2VicGFjazovL3RvcC1qYXZhc2NyaXB0LWZvcm0tdmFsaWRhdGlvbi1wcmFjdGljZS8uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2Rpc3QvcnVudGltZS9hcGkuanMiLCJ3ZWJwYWNrOi8vdG9wLWphdmFzY3JpcHQtZm9ybS12YWxpZGF0aW9uLXByYWN0aWNlLy4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9ydW50aW1lL3NvdXJjZU1hcHMuanMiLCJ3ZWJwYWNrOi8vdG9wLWphdmFzY3JpcHQtZm9ybS12YWxpZGF0aW9uLXByYWN0aWNlLy4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvaW5qZWN0U3R5bGVzSW50b1N0eWxlVGFnLmpzIiwid2VicGFjazovL3RvcC1qYXZhc2NyaXB0LWZvcm0tdmFsaWRhdGlvbi1wcmFjdGljZS8uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL2luc2VydEJ5U2VsZWN0b3IuanMiLCJ3ZWJwYWNrOi8vdG9wLWphdmFzY3JpcHQtZm9ybS12YWxpZGF0aW9uLXByYWN0aWNlLy4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvaW5zZXJ0U3R5bGVFbGVtZW50LmpzIiwid2VicGFjazovL3RvcC1qYXZhc2NyaXB0LWZvcm0tdmFsaWRhdGlvbi1wcmFjdGljZS8uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL3NldEF0dHJpYnV0ZXNXaXRob3V0QXR0cmlidXRlcy5qcyIsIndlYnBhY2s6Ly90b3AtamF2YXNjcmlwdC1mb3JtLXZhbGlkYXRpb24tcHJhY3RpY2UvLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9zdHlsZURvbUFQSS5qcyIsIndlYnBhY2s6Ly90b3AtamF2YXNjcmlwdC1mb3JtLXZhbGlkYXRpb24tcHJhY3RpY2UvLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9zdHlsZVRhZ1RyYW5zZm9ybS5qcyIsIndlYnBhY2s6Ly90b3AtamF2YXNjcmlwdC1mb3JtLXZhbGlkYXRpb24tcHJhY3RpY2Uvd2VicGFjay9ib290c3RyYXAiLCJ3ZWJwYWNrOi8vdG9wLWphdmFzY3JpcHQtZm9ybS12YWxpZGF0aW9uLXByYWN0aWNlL3dlYnBhY2svcnVudGltZS9jb21wYXQgZ2V0IGRlZmF1bHQgZXhwb3J0Iiwid2VicGFjazovL3RvcC1qYXZhc2NyaXB0LWZvcm0tdmFsaWRhdGlvbi1wcmFjdGljZS93ZWJwYWNrL3J1bnRpbWUvZGVmaW5lIHByb3BlcnR5IGdldHRlcnMiLCJ3ZWJwYWNrOi8vdG9wLWphdmFzY3JpcHQtZm9ybS12YWxpZGF0aW9uLXByYWN0aWNlL3dlYnBhY2svcnVudGltZS9oYXNPd25Qcm9wZXJ0eSBzaG9ydGhhbmQiLCJ3ZWJwYWNrOi8vdG9wLWphdmFzY3JpcHQtZm9ybS12YWxpZGF0aW9uLXByYWN0aWNlL3dlYnBhY2svcnVudGltZS9ub25jZSIsIndlYnBhY2s6Ly90b3AtamF2YXNjcmlwdC1mb3JtLXZhbGlkYXRpb24tcHJhY3RpY2UvLi9zcmMvc3R5bGUuY3NzPzcxNjMiLCJ3ZWJwYWNrOi8vdG9wLWphdmFzY3JpcHQtZm9ybS12YWxpZGF0aW9uLXByYWN0aWNlLy4vc3JjL2NvbXBvbmVudHMvaW5wdXRMYWJlbC5qcyIsIndlYnBhY2s6Ly90b3AtamF2YXNjcmlwdC1mb3JtLXZhbGlkYXRpb24tcHJhY3RpY2UvLi9zcmMvY29tcG9uZW50cy9pbnB1dFNwYW4uanMiLCJ3ZWJwYWNrOi8vdG9wLWphdmFzY3JpcHQtZm9ybS12YWxpZGF0aW9uLXByYWN0aWNlLy4vc3JjL2luZGV4LmpzIiwid2VicGFjazovL3RvcC1qYXZhc2NyaXB0LWZvcm0tdmFsaWRhdGlvbi1wcmFjdGljZS8uL3NyYy9jb21wb25lbnRzL2Zvcm0uanMiLCJ3ZWJwYWNrOi8vdG9wLWphdmFzY3JpcHQtZm9ybS12YWxpZGF0aW9uLXByYWN0aWNlLy4vc3JjL2NvbXBvbmVudHMvZW1haWxJbnB1dC5qcyIsIndlYnBhY2s6Ly90b3AtamF2YXNjcmlwdC1mb3JtLXZhbGlkYXRpb24tcHJhY3RpY2UvLi9zcmMvY29tcG9uZW50cy9jb3VudHJ5SW5wdXQuanMiLCJ3ZWJwYWNrOi8vdG9wLWphdmFzY3JpcHQtZm9ybS12YWxpZGF0aW9uLXByYWN0aWNlLy4vc3JjL2NvbXBvbmVudHMvY291bnRyeUxpc3QuanMiLCJ3ZWJwYWNrOi8vdG9wLWphdmFzY3JpcHQtZm9ybS12YWxpZGF0aW9uLXByYWN0aWNlLy4vc3JjL2NvbXBvbmVudHMvcG9zdGFsQ29kZUlucHV0LmpzIiwid2VicGFjazovL3RvcC1qYXZhc2NyaXB0LWZvcm0tdmFsaWRhdGlvbi1wcmFjdGljZS8uL3NyYy9jb21wb25lbnRzL3Bhc3N3b3JkSW5wdXQuanMiLCJ3ZWJwYWNrOi8vdG9wLWphdmFzY3JpcHQtZm9ybS12YWxpZGF0aW9uLXByYWN0aWNlLy4vc3JjL2NvbXBvbmVudHMvY29uZmlybVBhc3N3b3JkSW5wdXQuanMiLCJ3ZWJwYWNrOi8vdG9wLWphdmFzY3JpcHQtZm9ybS12YWxpZGF0aW9uLXByYWN0aWNlLy4vc3JjL2NvbXBvbmVudHMvc3VibWl0QnV0dG9uLmpzIl0sInNvdXJjZXNDb250ZW50IjpbIi8vIEltcG9ydHNcbmltcG9ydCBfX19DU1NfTE9BREVSX0FQSV9TT1VSQ0VNQVBfSU1QT1JUX19fIGZyb20gXCIuLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L3J1bnRpbWUvc291cmNlTWFwcy5qc1wiO1xuaW1wb3J0IF9fX0NTU19MT0FERVJfQVBJX0lNUE9SVF9fXyBmcm9tIFwiLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9ydW50aW1lL2FwaS5qc1wiO1xudmFyIF9fX0NTU19MT0FERVJfRVhQT1JUX19fID0gX19fQ1NTX0xPQURFUl9BUElfSU1QT1JUX19fKF9fX0NTU19MT0FERVJfQVBJX1NPVVJDRU1BUF9JTVBPUlRfX18pO1xuX19fQ1NTX0xPQURFUl9FWFBPUlRfX18ucHVzaChbbW9kdWxlLmlkLCBcIkBpbXBvcnQgdXJsKGh0dHBzOi8vZm9udHMuZ29vZ2xlYXBpcy5jb20vY3NzMj9mYW1pbHk9QmV2YW46aXRhbEAwOzEmZmFtaWx5PUludGVyOndnaHRAMTAwOzIwMDszMDA7NDAwOzUwMDs2MDA7NzAwOzgwMDs5MDAmZmFtaWx5PVJvYm90bzppdGFsLHdnaHRAMCwxMDA7MCwzMDA7MCw0MDA7MCw1MDA7MCw3MDA7MCw5MDA7MSwxMDA7MSwzMDA7MSw0MDA7MSw1MDA7MSw3MDA7MSw5MDAmZGlzcGxheT1zd2FwKTtcIl0pO1xuLy8gTW9kdWxlXG5fX19DU1NfTE9BREVSX0VYUE9SVF9fXy5wdXNoKFttb2R1bGUuaWQsIGBodG1sLFxuYm9keSB7XG4gICAgd2lkdGg6IDEwMCU7XG4gICAgaGVpZ2h0OiAxMDAlO1xuICAgIGJhY2tncm91bmQtY29sb3I6ICMzMzM7XG4gICAgZm9udC1mYW1pbHk6IFJvYm90bywgSGVsdmV0aWNhLCBBcmlhbCwgc2Fucy1zZXJpZjtcbiAgICBmb250LXNpemU6IDE2cHg7XG59XG5cbiosXG4qOjpiZWZvcmUsXG4qOjphZnRlciB7XG4gICAgYm94LXNpemluZzogYm9yZGVyLWJveDtcbiAgICAtbW96LWJveC1zaXppbmc6IGJvcmRlci1ib3g7XG4gICAgLXdlYmtpdC1ib3gtc2l6aW5nOiBib3JkZXItYm94O1xufVxuXG5ib2R5IHtcbiAgICBkaXNwbGF5OiBmbGV4O1xuICAgIGp1c3RpZnktY29udGVudDogY2VudGVyO1xuICAgIGFsaWduLWl0ZW1zOiBjZW50ZXI7XG59XG5cbmZvcm0ge1xuICAgIGJvcmRlcjogMnB4IHNvbGlkIHdoaXRlc21va2U7XG4gICAgYm9yZGVyLXJhZGl1czogMTBweDtcbiAgICBwYWRkaW5nOiAxNXB4O1xuICAgIHdpZHRoOiAzMDBweDtcblxuICAgIGRpc3BsYXk6IGZsZXg7XG4gICAgZmxleC1kaXJlY3Rpb246IGNvbHVtbjtcbiAgICBnYXA6IDIwcHg7XG59XG5cbmZvcm0gPiBkaXYge1xuICAgIGRpc3BsYXk6IGZsZXg7XG4gICAgZmxleC1kaXJlY3Rpb246IGNvbHVtbjtcbn1cblxubGFiZWwge1xuICAgIGNvbG9yOiB3aGl0ZXNtb2tlO1xuICAgIGZvbnQtc2l6ZTogMC45NXJlbTtcbiAgICBtYXJnaW4tYm90dG9tOiA1cHg7XG59XG5cbmlucHV0IHtcbiAgICBwYWRkaW5nOiA1cHggNnB4O1xuICAgIGJvcmRlci1yYWRpdXM6IDFweCAxcHggMCAwO1xuICAgIGJvcmRlcjogbm9uZTtcbn1cblxuaW5wdXQ6aW52YWxpZCB7XG4gICAgYmFja2dyb3VuZC1jb2xvcjogY29yYWw7XG59XG5cbnNwYW5bZGF0YS1lcnJvci10eXBlXSB7XG4gICAgYmFja2dyb3VuZC1jb2xvcjogbWFyb29uO1xuICAgIGNvbG9yOiB3aGl0ZTtcbiAgICBib3JkZXItcmFkaXVzOiAwIDAgMTBweCAxMHB4O1xuICAgIGZvbnQtc3R5bGU6IGl0YWxpYztcbiAgICBmb250LXNpemU6IDAuNzVyZW07XG59XG5cbnNwYW5bZGF0YS1lcnJvci10eXBlXS5hY3RpdmUge1xuICAgIHBhZGRpbmc6IDRweCA2cHg7XG59XG5cbmJ1dHRvblt0eXBlPVwic3VibWl0XCJdIHtcbiAgICBmb250LWZhbWlseTogUm9ib3RvLCBIZWx2ZXRpY2EsIEFyaWFsLCBzYW5zLXNlcmlmO1xuICAgIGZvbnQtc2l6ZTogMS4wNXJlbTtcbiAgICBwYWRkaW5nOiA4cHggMTBweDtcbiAgICBiYWNrZ3JvdW5kLWNvbG9yOiB3aGl0ZXNtb2tlO1xuICAgIGJvcmRlcjogbm9uZTtcbiAgICBib3JkZXItcmFkaXVzOiA3cHg7XG4gICAgbWFyZ2luLXRvcDogMTBweDtcbiAgICBjdXJzb3I6IHBvaW50ZXI7XG59YCwgXCJcIix7XCJ2ZXJzaW9uXCI6MyxcInNvdXJjZXNcIjpbXCJ3ZWJwYWNrOi8vLi9zcmMvc3R5bGUuY3NzXCJdLFwibmFtZXNcIjpbXSxcIm1hcHBpbmdzXCI6XCJBQUVBOztJQUVJLFdBQVc7SUFDWCxZQUFZO0lBQ1osc0JBQXNCO0lBQ3RCLGlEQUFpRDtJQUNqRCxlQUFlO0FBQ25COztBQUVBOzs7SUFHSSxzQkFBc0I7SUFDdEIsMkJBQTJCO0lBQzNCLDhCQUE4QjtBQUNsQzs7QUFFQTtJQUNJLGFBQWE7SUFDYix1QkFBdUI7SUFDdkIsbUJBQW1CO0FBQ3ZCOztBQUVBO0lBQ0ksNEJBQTRCO0lBQzVCLG1CQUFtQjtJQUNuQixhQUFhO0lBQ2IsWUFBWTs7SUFFWixhQUFhO0lBQ2Isc0JBQXNCO0lBQ3RCLFNBQVM7QUFDYjs7QUFFQTtJQUNJLGFBQWE7SUFDYixzQkFBc0I7QUFDMUI7O0FBRUE7SUFDSSxpQkFBaUI7SUFDakIsa0JBQWtCO0lBQ2xCLGtCQUFrQjtBQUN0Qjs7QUFFQTtJQUNJLGdCQUFnQjtJQUNoQiwwQkFBMEI7SUFDMUIsWUFBWTtBQUNoQjs7QUFFQTtJQUNJLHVCQUF1QjtBQUMzQjs7QUFFQTtJQUNJLHdCQUF3QjtJQUN4QixZQUFZO0lBQ1osNEJBQTRCO0lBQzVCLGtCQUFrQjtJQUNsQixrQkFBa0I7QUFDdEI7O0FBRUE7SUFDSSxnQkFBZ0I7QUFDcEI7O0FBRUE7SUFDSSxpREFBaUQ7SUFDakQsa0JBQWtCO0lBQ2xCLGlCQUFpQjtJQUNqQiw0QkFBNEI7SUFDNUIsWUFBWTtJQUNaLGtCQUFrQjtJQUNsQixnQkFBZ0I7SUFDaEIsZUFBZTtBQUNuQlwiLFwic291cmNlc0NvbnRlbnRcIjpbXCJAaW1wb3J0IHVybCgnaHR0cHM6Ly9mb250cy5nb29nbGVhcGlzLmNvbS9jc3MyP2ZhbWlseT1CZXZhbjppdGFsQDA7MSZmYW1pbHk9SW50ZXI6d2dodEAxMDA7MjAwOzMwMDs0MDA7NTAwOzYwMDs3MDA7ODAwOzkwMCZmYW1pbHk9Um9ib3RvOml0YWwsd2dodEAwLDEwMDswLDMwMDswLDQwMDswLDUwMDswLDcwMDswLDkwMDsxLDEwMDsxLDMwMDsxLDQwMDsxLDUwMDsxLDcwMDsxLDkwMCZkaXNwbGF5PXN3YXAnKTtcXG5cXG5odG1sLFxcbmJvZHkge1xcbiAgICB3aWR0aDogMTAwJTtcXG4gICAgaGVpZ2h0OiAxMDAlO1xcbiAgICBiYWNrZ3JvdW5kLWNvbG9yOiAjMzMzO1xcbiAgICBmb250LWZhbWlseTogUm9ib3RvLCBIZWx2ZXRpY2EsIEFyaWFsLCBzYW5zLXNlcmlmO1xcbiAgICBmb250LXNpemU6IDE2cHg7XFxufVxcblxcbiosXFxuKjo6YmVmb3JlLFxcbio6OmFmdGVyIHtcXG4gICAgYm94LXNpemluZzogYm9yZGVyLWJveDtcXG4gICAgLW1vei1ib3gtc2l6aW5nOiBib3JkZXItYm94O1xcbiAgICAtd2Via2l0LWJveC1zaXppbmc6IGJvcmRlci1ib3g7XFxufVxcblxcbmJvZHkge1xcbiAgICBkaXNwbGF5OiBmbGV4O1xcbiAgICBqdXN0aWZ5LWNvbnRlbnQ6IGNlbnRlcjtcXG4gICAgYWxpZ24taXRlbXM6IGNlbnRlcjtcXG59XFxuXFxuZm9ybSB7XFxuICAgIGJvcmRlcjogMnB4IHNvbGlkIHdoaXRlc21va2U7XFxuICAgIGJvcmRlci1yYWRpdXM6IDEwcHg7XFxuICAgIHBhZGRpbmc6IDE1cHg7XFxuICAgIHdpZHRoOiAzMDBweDtcXG5cXG4gICAgZGlzcGxheTogZmxleDtcXG4gICAgZmxleC1kaXJlY3Rpb246IGNvbHVtbjtcXG4gICAgZ2FwOiAyMHB4O1xcbn1cXG5cXG5mb3JtID4gZGl2IHtcXG4gICAgZGlzcGxheTogZmxleDtcXG4gICAgZmxleC1kaXJlY3Rpb246IGNvbHVtbjtcXG59XFxuXFxubGFiZWwge1xcbiAgICBjb2xvcjogd2hpdGVzbW9rZTtcXG4gICAgZm9udC1zaXplOiAwLjk1cmVtO1xcbiAgICBtYXJnaW4tYm90dG9tOiA1cHg7XFxufVxcblxcbmlucHV0IHtcXG4gICAgcGFkZGluZzogNXB4IDZweDtcXG4gICAgYm9yZGVyLXJhZGl1czogMXB4IDFweCAwIDA7XFxuICAgIGJvcmRlcjogbm9uZTtcXG59XFxuXFxuaW5wdXQ6aW52YWxpZCB7XFxuICAgIGJhY2tncm91bmQtY29sb3I6IGNvcmFsO1xcbn1cXG5cXG5zcGFuW2RhdGEtZXJyb3ItdHlwZV0ge1xcbiAgICBiYWNrZ3JvdW5kLWNvbG9yOiBtYXJvb247XFxuICAgIGNvbG9yOiB3aGl0ZTtcXG4gICAgYm9yZGVyLXJhZGl1czogMCAwIDEwcHggMTBweDtcXG4gICAgZm9udC1zdHlsZTogaXRhbGljO1xcbiAgICBmb250LXNpemU6IDAuNzVyZW07XFxufVxcblxcbnNwYW5bZGF0YS1lcnJvci10eXBlXS5hY3RpdmUge1xcbiAgICBwYWRkaW5nOiA0cHggNnB4O1xcbn1cXG5cXG5idXR0b25bdHlwZT1cXFwic3VibWl0XFxcIl0ge1xcbiAgICBmb250LWZhbWlseTogUm9ib3RvLCBIZWx2ZXRpY2EsIEFyaWFsLCBzYW5zLXNlcmlmO1xcbiAgICBmb250LXNpemU6IDEuMDVyZW07XFxuICAgIHBhZGRpbmc6IDhweCAxMHB4O1xcbiAgICBiYWNrZ3JvdW5kLWNvbG9yOiB3aGl0ZXNtb2tlO1xcbiAgICBib3JkZXI6IG5vbmU7XFxuICAgIGJvcmRlci1yYWRpdXM6IDdweDtcXG4gICAgbWFyZ2luLXRvcDogMTBweDtcXG4gICAgY3Vyc29yOiBwb2ludGVyO1xcbn1cIl0sXCJzb3VyY2VSb290XCI6XCJcIn1dKTtcbi8vIEV4cG9ydHNcbmV4cG9ydCBkZWZhdWx0IF9fX0NTU19MT0FERVJfRVhQT1JUX19fO1xuIiwiXCJ1c2Ugc3RyaWN0XCI7XG5cbi8qXG4gIE1JVCBMaWNlbnNlIGh0dHA6Ly93d3cub3BlbnNvdXJjZS5vcmcvbGljZW5zZXMvbWl0LWxpY2Vuc2UucGhwXG4gIEF1dGhvciBUb2JpYXMgS29wcGVycyBAc29rcmFcbiovXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChjc3NXaXRoTWFwcGluZ1RvU3RyaW5nKSB7XG4gIHZhciBsaXN0ID0gW107XG5cbiAgLy8gcmV0dXJuIHRoZSBsaXN0IG9mIG1vZHVsZXMgYXMgY3NzIHN0cmluZ1xuICBsaXN0LnRvU3RyaW5nID0gZnVuY3Rpb24gdG9TdHJpbmcoKSB7XG4gICAgcmV0dXJuIHRoaXMubWFwKGZ1bmN0aW9uIChpdGVtKSB7XG4gICAgICB2YXIgY29udGVudCA9IFwiXCI7XG4gICAgICB2YXIgbmVlZExheWVyID0gdHlwZW9mIGl0ZW1bNV0gIT09IFwidW5kZWZpbmVkXCI7XG4gICAgICBpZiAoaXRlbVs0XSkge1xuICAgICAgICBjb250ZW50ICs9IFwiQHN1cHBvcnRzIChcIi5jb25jYXQoaXRlbVs0XSwgXCIpIHtcIik7XG4gICAgICB9XG4gICAgICBpZiAoaXRlbVsyXSkge1xuICAgICAgICBjb250ZW50ICs9IFwiQG1lZGlhIFwiLmNvbmNhdChpdGVtWzJdLCBcIiB7XCIpO1xuICAgICAgfVxuICAgICAgaWYgKG5lZWRMYXllcikge1xuICAgICAgICBjb250ZW50ICs9IFwiQGxheWVyXCIuY29uY2F0KGl0ZW1bNV0ubGVuZ3RoID4gMCA/IFwiIFwiLmNvbmNhdChpdGVtWzVdKSA6IFwiXCIsIFwiIHtcIik7XG4gICAgICB9XG4gICAgICBjb250ZW50ICs9IGNzc1dpdGhNYXBwaW5nVG9TdHJpbmcoaXRlbSk7XG4gICAgICBpZiAobmVlZExheWVyKSB7XG4gICAgICAgIGNvbnRlbnQgKz0gXCJ9XCI7XG4gICAgICB9XG4gICAgICBpZiAoaXRlbVsyXSkge1xuICAgICAgICBjb250ZW50ICs9IFwifVwiO1xuICAgICAgfVxuICAgICAgaWYgKGl0ZW1bNF0pIHtcbiAgICAgICAgY29udGVudCArPSBcIn1cIjtcbiAgICAgIH1cbiAgICAgIHJldHVybiBjb250ZW50O1xuICAgIH0pLmpvaW4oXCJcIik7XG4gIH07XG5cbiAgLy8gaW1wb3J0IGEgbGlzdCBvZiBtb2R1bGVzIGludG8gdGhlIGxpc3RcbiAgbGlzdC5pID0gZnVuY3Rpb24gaShtb2R1bGVzLCBtZWRpYSwgZGVkdXBlLCBzdXBwb3J0cywgbGF5ZXIpIHtcbiAgICBpZiAodHlwZW9mIG1vZHVsZXMgPT09IFwic3RyaW5nXCIpIHtcbiAgICAgIG1vZHVsZXMgPSBbW251bGwsIG1vZHVsZXMsIHVuZGVmaW5lZF1dO1xuICAgIH1cbiAgICB2YXIgYWxyZWFkeUltcG9ydGVkTW9kdWxlcyA9IHt9O1xuICAgIGlmIChkZWR1cGUpIHtcbiAgICAgIGZvciAodmFyIGsgPSAwOyBrIDwgdGhpcy5sZW5ndGg7IGsrKykge1xuICAgICAgICB2YXIgaWQgPSB0aGlzW2tdWzBdO1xuICAgICAgICBpZiAoaWQgIT0gbnVsbCkge1xuICAgICAgICAgIGFscmVhZHlJbXBvcnRlZE1vZHVsZXNbaWRdID0gdHJ1ZTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cbiAgICBmb3IgKHZhciBfayA9IDA7IF9rIDwgbW9kdWxlcy5sZW5ndGg7IF9rKyspIHtcbiAgICAgIHZhciBpdGVtID0gW10uY29uY2F0KG1vZHVsZXNbX2tdKTtcbiAgICAgIGlmIChkZWR1cGUgJiYgYWxyZWFkeUltcG9ydGVkTW9kdWxlc1tpdGVtWzBdXSkge1xuICAgICAgICBjb250aW51ZTtcbiAgICAgIH1cbiAgICAgIGlmICh0eXBlb2YgbGF5ZXIgIT09IFwidW5kZWZpbmVkXCIpIHtcbiAgICAgICAgaWYgKHR5cGVvZiBpdGVtWzVdID09PSBcInVuZGVmaW5lZFwiKSB7XG4gICAgICAgICAgaXRlbVs1XSA9IGxheWVyO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIGl0ZW1bMV0gPSBcIkBsYXllclwiLmNvbmNhdChpdGVtWzVdLmxlbmd0aCA+IDAgPyBcIiBcIi5jb25jYXQoaXRlbVs1XSkgOiBcIlwiLCBcIiB7XCIpLmNvbmNhdChpdGVtWzFdLCBcIn1cIik7XG4gICAgICAgICAgaXRlbVs1XSA9IGxheWVyO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICBpZiAobWVkaWEpIHtcbiAgICAgICAgaWYgKCFpdGVtWzJdKSB7XG4gICAgICAgICAgaXRlbVsyXSA9IG1lZGlhO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIGl0ZW1bMV0gPSBcIkBtZWRpYSBcIi5jb25jYXQoaXRlbVsyXSwgXCIge1wiKS5jb25jYXQoaXRlbVsxXSwgXCJ9XCIpO1xuICAgICAgICAgIGl0ZW1bMl0gPSBtZWRpYTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgaWYgKHN1cHBvcnRzKSB7XG4gICAgICAgIGlmICghaXRlbVs0XSkge1xuICAgICAgICAgIGl0ZW1bNF0gPSBcIlwiLmNvbmNhdChzdXBwb3J0cyk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgaXRlbVsxXSA9IFwiQHN1cHBvcnRzIChcIi5jb25jYXQoaXRlbVs0XSwgXCIpIHtcIikuY29uY2F0KGl0ZW1bMV0sIFwifVwiKTtcbiAgICAgICAgICBpdGVtWzRdID0gc3VwcG9ydHM7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIGxpc3QucHVzaChpdGVtKTtcbiAgICB9XG4gIH07XG4gIHJldHVybiBsaXN0O1xufTsiLCJcInVzZSBzdHJpY3RcIjtcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoaXRlbSkge1xuICB2YXIgY29udGVudCA9IGl0ZW1bMV07XG4gIHZhciBjc3NNYXBwaW5nID0gaXRlbVszXTtcbiAgaWYgKCFjc3NNYXBwaW5nKSB7XG4gICAgcmV0dXJuIGNvbnRlbnQ7XG4gIH1cbiAgaWYgKHR5cGVvZiBidG9hID09PSBcImZ1bmN0aW9uXCIpIHtcbiAgICB2YXIgYmFzZTY0ID0gYnRvYSh1bmVzY2FwZShlbmNvZGVVUklDb21wb25lbnQoSlNPTi5zdHJpbmdpZnkoY3NzTWFwcGluZykpKSk7XG4gICAgdmFyIGRhdGEgPSBcInNvdXJjZU1hcHBpbmdVUkw9ZGF0YTphcHBsaWNhdGlvbi9qc29uO2NoYXJzZXQ9dXRmLTg7YmFzZTY0LFwiLmNvbmNhdChiYXNlNjQpO1xuICAgIHZhciBzb3VyY2VNYXBwaW5nID0gXCIvKiMgXCIuY29uY2F0KGRhdGEsIFwiICovXCIpO1xuICAgIHJldHVybiBbY29udGVudF0uY29uY2F0KFtzb3VyY2VNYXBwaW5nXSkuam9pbihcIlxcblwiKTtcbiAgfVxuICByZXR1cm4gW2NvbnRlbnRdLmpvaW4oXCJcXG5cIik7XG59OyIsIlwidXNlIHN0cmljdFwiO1xuXG52YXIgc3R5bGVzSW5ET00gPSBbXTtcbmZ1bmN0aW9uIGdldEluZGV4QnlJZGVudGlmaWVyKGlkZW50aWZpZXIpIHtcbiAgdmFyIHJlc3VsdCA9IC0xO1xuICBmb3IgKHZhciBpID0gMDsgaSA8IHN0eWxlc0luRE9NLmxlbmd0aDsgaSsrKSB7XG4gICAgaWYgKHN0eWxlc0luRE9NW2ldLmlkZW50aWZpZXIgPT09IGlkZW50aWZpZXIpIHtcbiAgICAgIHJlc3VsdCA9IGk7XG4gICAgICBicmVhaztcbiAgICB9XG4gIH1cbiAgcmV0dXJuIHJlc3VsdDtcbn1cbmZ1bmN0aW9uIG1vZHVsZXNUb0RvbShsaXN0LCBvcHRpb25zKSB7XG4gIHZhciBpZENvdW50TWFwID0ge307XG4gIHZhciBpZGVudGlmaWVycyA9IFtdO1xuICBmb3IgKHZhciBpID0gMDsgaSA8IGxpc3QubGVuZ3RoOyBpKyspIHtcbiAgICB2YXIgaXRlbSA9IGxpc3RbaV07XG4gICAgdmFyIGlkID0gb3B0aW9ucy5iYXNlID8gaXRlbVswXSArIG9wdGlvbnMuYmFzZSA6IGl0ZW1bMF07XG4gICAgdmFyIGNvdW50ID0gaWRDb3VudE1hcFtpZF0gfHwgMDtcbiAgICB2YXIgaWRlbnRpZmllciA9IFwiXCIuY29uY2F0KGlkLCBcIiBcIikuY29uY2F0KGNvdW50KTtcbiAgICBpZENvdW50TWFwW2lkXSA9IGNvdW50ICsgMTtcbiAgICB2YXIgaW5kZXhCeUlkZW50aWZpZXIgPSBnZXRJbmRleEJ5SWRlbnRpZmllcihpZGVudGlmaWVyKTtcbiAgICB2YXIgb2JqID0ge1xuICAgICAgY3NzOiBpdGVtWzFdLFxuICAgICAgbWVkaWE6IGl0ZW1bMl0sXG4gICAgICBzb3VyY2VNYXA6IGl0ZW1bM10sXG4gICAgICBzdXBwb3J0czogaXRlbVs0XSxcbiAgICAgIGxheWVyOiBpdGVtWzVdXG4gICAgfTtcbiAgICBpZiAoaW5kZXhCeUlkZW50aWZpZXIgIT09IC0xKSB7XG4gICAgICBzdHlsZXNJbkRPTVtpbmRleEJ5SWRlbnRpZmllcl0ucmVmZXJlbmNlcysrO1xuICAgICAgc3R5bGVzSW5ET01baW5kZXhCeUlkZW50aWZpZXJdLnVwZGF0ZXIob2JqKTtcbiAgICB9IGVsc2Uge1xuICAgICAgdmFyIHVwZGF0ZXIgPSBhZGRFbGVtZW50U3R5bGUob2JqLCBvcHRpb25zKTtcbiAgICAgIG9wdGlvbnMuYnlJbmRleCA9IGk7XG4gICAgICBzdHlsZXNJbkRPTS5zcGxpY2UoaSwgMCwge1xuICAgICAgICBpZGVudGlmaWVyOiBpZGVudGlmaWVyLFxuICAgICAgICB1cGRhdGVyOiB1cGRhdGVyLFxuICAgICAgICByZWZlcmVuY2VzOiAxXG4gICAgICB9KTtcbiAgICB9XG4gICAgaWRlbnRpZmllcnMucHVzaChpZGVudGlmaWVyKTtcbiAgfVxuICByZXR1cm4gaWRlbnRpZmllcnM7XG59XG5mdW5jdGlvbiBhZGRFbGVtZW50U3R5bGUob2JqLCBvcHRpb25zKSB7XG4gIHZhciBhcGkgPSBvcHRpb25zLmRvbUFQSShvcHRpb25zKTtcbiAgYXBpLnVwZGF0ZShvYmopO1xuICB2YXIgdXBkYXRlciA9IGZ1bmN0aW9uIHVwZGF0ZXIobmV3T2JqKSB7XG4gICAgaWYgKG5ld09iaikge1xuICAgICAgaWYgKG5ld09iai5jc3MgPT09IG9iai5jc3MgJiYgbmV3T2JqLm1lZGlhID09PSBvYmoubWVkaWEgJiYgbmV3T2JqLnNvdXJjZU1hcCA9PT0gb2JqLnNvdXJjZU1hcCAmJiBuZXdPYmouc3VwcG9ydHMgPT09IG9iai5zdXBwb3J0cyAmJiBuZXdPYmoubGF5ZXIgPT09IG9iai5sYXllcikge1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG4gICAgICBhcGkudXBkYXRlKG9iaiA9IG5ld09iaik7XG4gICAgfSBlbHNlIHtcbiAgICAgIGFwaS5yZW1vdmUoKTtcbiAgICB9XG4gIH07XG4gIHJldHVybiB1cGRhdGVyO1xufVxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAobGlzdCwgb3B0aW9ucykge1xuICBvcHRpb25zID0gb3B0aW9ucyB8fCB7fTtcbiAgbGlzdCA9IGxpc3QgfHwgW107XG4gIHZhciBsYXN0SWRlbnRpZmllcnMgPSBtb2R1bGVzVG9Eb20obGlzdCwgb3B0aW9ucyk7XG4gIHJldHVybiBmdW5jdGlvbiB1cGRhdGUobmV3TGlzdCkge1xuICAgIG5ld0xpc3QgPSBuZXdMaXN0IHx8IFtdO1xuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgbGFzdElkZW50aWZpZXJzLmxlbmd0aDsgaSsrKSB7XG4gICAgICB2YXIgaWRlbnRpZmllciA9IGxhc3RJZGVudGlmaWVyc1tpXTtcbiAgICAgIHZhciBpbmRleCA9IGdldEluZGV4QnlJZGVudGlmaWVyKGlkZW50aWZpZXIpO1xuICAgICAgc3R5bGVzSW5ET01baW5kZXhdLnJlZmVyZW5jZXMtLTtcbiAgICB9XG4gICAgdmFyIG5ld0xhc3RJZGVudGlmaWVycyA9IG1vZHVsZXNUb0RvbShuZXdMaXN0LCBvcHRpb25zKTtcbiAgICBmb3IgKHZhciBfaSA9IDA7IF9pIDwgbGFzdElkZW50aWZpZXJzLmxlbmd0aDsgX2krKykge1xuICAgICAgdmFyIF9pZGVudGlmaWVyID0gbGFzdElkZW50aWZpZXJzW19pXTtcbiAgICAgIHZhciBfaW5kZXggPSBnZXRJbmRleEJ5SWRlbnRpZmllcihfaWRlbnRpZmllcik7XG4gICAgICBpZiAoc3R5bGVzSW5ET01bX2luZGV4XS5yZWZlcmVuY2VzID09PSAwKSB7XG4gICAgICAgIHN0eWxlc0luRE9NW19pbmRleF0udXBkYXRlcigpO1xuICAgICAgICBzdHlsZXNJbkRPTS5zcGxpY2UoX2luZGV4LCAxKTtcbiAgICAgIH1cbiAgICB9XG4gICAgbGFzdElkZW50aWZpZXJzID0gbmV3TGFzdElkZW50aWZpZXJzO1xuICB9O1xufTsiLCJcInVzZSBzdHJpY3RcIjtcblxudmFyIG1lbW8gPSB7fTtcblxuLyogaXN0YW5idWwgaWdub3JlIG5leHQgICovXG5mdW5jdGlvbiBnZXRUYXJnZXQodGFyZ2V0KSB7XG4gIGlmICh0eXBlb2YgbWVtb1t0YXJnZXRdID09PSBcInVuZGVmaW5lZFwiKSB7XG4gICAgdmFyIHN0eWxlVGFyZ2V0ID0gZG9jdW1lbnQucXVlcnlTZWxlY3Rvcih0YXJnZXQpO1xuXG4gICAgLy8gU3BlY2lhbCBjYXNlIHRvIHJldHVybiBoZWFkIG9mIGlmcmFtZSBpbnN0ZWFkIG9mIGlmcmFtZSBpdHNlbGZcbiAgICBpZiAod2luZG93LkhUTUxJRnJhbWVFbGVtZW50ICYmIHN0eWxlVGFyZ2V0IGluc3RhbmNlb2Ygd2luZG93LkhUTUxJRnJhbWVFbGVtZW50KSB7XG4gICAgICB0cnkge1xuICAgICAgICAvLyBUaGlzIHdpbGwgdGhyb3cgYW4gZXhjZXB0aW9uIGlmIGFjY2VzcyB0byBpZnJhbWUgaXMgYmxvY2tlZFxuICAgICAgICAvLyBkdWUgdG8gY3Jvc3Mtb3JpZ2luIHJlc3RyaWN0aW9uc1xuICAgICAgICBzdHlsZVRhcmdldCA9IHN0eWxlVGFyZ2V0LmNvbnRlbnREb2N1bWVudC5oZWFkO1xuICAgICAgfSBjYXRjaCAoZSkge1xuICAgICAgICAvLyBpc3RhbmJ1bCBpZ25vcmUgbmV4dFxuICAgICAgICBzdHlsZVRhcmdldCA9IG51bGw7XG4gICAgICB9XG4gICAgfVxuICAgIG1lbW9bdGFyZ2V0XSA9IHN0eWxlVGFyZ2V0O1xuICB9XG4gIHJldHVybiBtZW1vW3RhcmdldF07XG59XG5cbi8qIGlzdGFuYnVsIGlnbm9yZSBuZXh0ICAqL1xuZnVuY3Rpb24gaW5zZXJ0QnlTZWxlY3RvcihpbnNlcnQsIHN0eWxlKSB7XG4gIHZhciB0YXJnZXQgPSBnZXRUYXJnZXQoaW5zZXJ0KTtcbiAgaWYgKCF0YXJnZXQpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoXCJDb3VsZG4ndCBmaW5kIGEgc3R5bGUgdGFyZ2V0LiBUaGlzIHByb2JhYmx5IG1lYW5zIHRoYXQgdGhlIHZhbHVlIGZvciB0aGUgJ2luc2VydCcgcGFyYW1ldGVyIGlzIGludmFsaWQuXCIpO1xuICB9XG4gIHRhcmdldC5hcHBlbmRDaGlsZChzdHlsZSk7XG59XG5tb2R1bGUuZXhwb3J0cyA9IGluc2VydEJ5U2VsZWN0b3I7IiwiXCJ1c2Ugc3RyaWN0XCI7XG5cbi8qIGlzdGFuYnVsIGlnbm9yZSBuZXh0ICAqL1xuZnVuY3Rpb24gaW5zZXJ0U3R5bGVFbGVtZW50KG9wdGlvbnMpIHtcbiAgdmFyIGVsZW1lbnQgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwic3R5bGVcIik7XG4gIG9wdGlvbnMuc2V0QXR0cmlidXRlcyhlbGVtZW50LCBvcHRpb25zLmF0dHJpYnV0ZXMpO1xuICBvcHRpb25zLmluc2VydChlbGVtZW50LCBvcHRpb25zLm9wdGlvbnMpO1xuICByZXR1cm4gZWxlbWVudDtcbn1cbm1vZHVsZS5leHBvcnRzID0gaW5zZXJ0U3R5bGVFbGVtZW50OyIsIlwidXNlIHN0cmljdFwiO1xuXG4vKiBpc3RhbmJ1bCBpZ25vcmUgbmV4dCAgKi9cbmZ1bmN0aW9uIHNldEF0dHJpYnV0ZXNXaXRob3V0QXR0cmlidXRlcyhzdHlsZUVsZW1lbnQpIHtcbiAgdmFyIG5vbmNlID0gdHlwZW9mIF9fd2VicGFja19ub25jZV9fICE9PSBcInVuZGVmaW5lZFwiID8gX193ZWJwYWNrX25vbmNlX18gOiBudWxsO1xuICBpZiAobm9uY2UpIHtcbiAgICBzdHlsZUVsZW1lbnQuc2V0QXR0cmlidXRlKFwibm9uY2VcIiwgbm9uY2UpO1xuICB9XG59XG5tb2R1bGUuZXhwb3J0cyA9IHNldEF0dHJpYnV0ZXNXaXRob3V0QXR0cmlidXRlczsiLCJcInVzZSBzdHJpY3RcIjtcblxuLyogaXN0YW5idWwgaWdub3JlIG5leHQgICovXG5mdW5jdGlvbiBhcHBseShzdHlsZUVsZW1lbnQsIG9wdGlvbnMsIG9iaikge1xuICB2YXIgY3NzID0gXCJcIjtcbiAgaWYgKG9iai5zdXBwb3J0cykge1xuICAgIGNzcyArPSBcIkBzdXBwb3J0cyAoXCIuY29uY2F0KG9iai5zdXBwb3J0cywgXCIpIHtcIik7XG4gIH1cbiAgaWYgKG9iai5tZWRpYSkge1xuICAgIGNzcyArPSBcIkBtZWRpYSBcIi5jb25jYXQob2JqLm1lZGlhLCBcIiB7XCIpO1xuICB9XG4gIHZhciBuZWVkTGF5ZXIgPSB0eXBlb2Ygb2JqLmxheWVyICE9PSBcInVuZGVmaW5lZFwiO1xuICBpZiAobmVlZExheWVyKSB7XG4gICAgY3NzICs9IFwiQGxheWVyXCIuY29uY2F0KG9iai5sYXllci5sZW5ndGggPiAwID8gXCIgXCIuY29uY2F0KG9iai5sYXllcikgOiBcIlwiLCBcIiB7XCIpO1xuICB9XG4gIGNzcyArPSBvYmouY3NzO1xuICBpZiAobmVlZExheWVyKSB7XG4gICAgY3NzICs9IFwifVwiO1xuICB9XG4gIGlmIChvYmoubWVkaWEpIHtcbiAgICBjc3MgKz0gXCJ9XCI7XG4gIH1cbiAgaWYgKG9iai5zdXBwb3J0cykge1xuICAgIGNzcyArPSBcIn1cIjtcbiAgfVxuICB2YXIgc291cmNlTWFwID0gb2JqLnNvdXJjZU1hcDtcbiAgaWYgKHNvdXJjZU1hcCAmJiB0eXBlb2YgYnRvYSAhPT0gXCJ1bmRlZmluZWRcIikge1xuICAgIGNzcyArPSBcIlxcbi8qIyBzb3VyY2VNYXBwaW5nVVJMPWRhdGE6YXBwbGljYXRpb24vanNvbjtiYXNlNjQsXCIuY29uY2F0KGJ0b2EodW5lc2NhcGUoZW5jb2RlVVJJQ29tcG9uZW50KEpTT04uc3RyaW5naWZ5KHNvdXJjZU1hcCkpKSksIFwiICovXCIpO1xuICB9XG5cbiAgLy8gRm9yIG9sZCBJRVxuICAvKiBpc3RhbmJ1bCBpZ25vcmUgaWYgICovXG4gIG9wdGlvbnMuc3R5bGVUYWdUcmFuc2Zvcm0oY3NzLCBzdHlsZUVsZW1lbnQsIG9wdGlvbnMub3B0aW9ucyk7XG59XG5mdW5jdGlvbiByZW1vdmVTdHlsZUVsZW1lbnQoc3R5bGVFbGVtZW50KSB7XG4gIC8vIGlzdGFuYnVsIGlnbm9yZSBpZlxuICBpZiAoc3R5bGVFbGVtZW50LnBhcmVudE5vZGUgPT09IG51bGwpIHtcbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cbiAgc3R5bGVFbGVtZW50LnBhcmVudE5vZGUucmVtb3ZlQ2hpbGQoc3R5bGVFbGVtZW50KTtcbn1cblxuLyogaXN0YW5idWwgaWdub3JlIG5leHQgICovXG5mdW5jdGlvbiBkb21BUEkob3B0aW9ucykge1xuICBpZiAodHlwZW9mIGRvY3VtZW50ID09PSBcInVuZGVmaW5lZFwiKSB7XG4gICAgcmV0dXJuIHtcbiAgICAgIHVwZGF0ZTogZnVuY3Rpb24gdXBkYXRlKCkge30sXG4gICAgICByZW1vdmU6IGZ1bmN0aW9uIHJlbW92ZSgpIHt9XG4gICAgfTtcbiAgfVxuICB2YXIgc3R5bGVFbGVtZW50ID0gb3B0aW9ucy5pbnNlcnRTdHlsZUVsZW1lbnQob3B0aW9ucyk7XG4gIHJldHVybiB7XG4gICAgdXBkYXRlOiBmdW5jdGlvbiB1cGRhdGUob2JqKSB7XG4gICAgICBhcHBseShzdHlsZUVsZW1lbnQsIG9wdGlvbnMsIG9iaik7XG4gICAgfSxcbiAgICByZW1vdmU6IGZ1bmN0aW9uIHJlbW92ZSgpIHtcbiAgICAgIHJlbW92ZVN0eWxlRWxlbWVudChzdHlsZUVsZW1lbnQpO1xuICAgIH1cbiAgfTtcbn1cbm1vZHVsZS5leHBvcnRzID0gZG9tQVBJOyIsIlwidXNlIHN0cmljdFwiO1xuXG4vKiBpc3RhbmJ1bCBpZ25vcmUgbmV4dCAgKi9cbmZ1bmN0aW9uIHN0eWxlVGFnVHJhbnNmb3JtKGNzcywgc3R5bGVFbGVtZW50KSB7XG4gIGlmIChzdHlsZUVsZW1lbnQuc3R5bGVTaGVldCkge1xuICAgIHN0eWxlRWxlbWVudC5zdHlsZVNoZWV0LmNzc1RleHQgPSBjc3M7XG4gIH0gZWxzZSB7XG4gICAgd2hpbGUgKHN0eWxlRWxlbWVudC5maXJzdENoaWxkKSB7XG4gICAgICBzdHlsZUVsZW1lbnQucmVtb3ZlQ2hpbGQoc3R5bGVFbGVtZW50LmZpcnN0Q2hpbGQpO1xuICAgIH1cbiAgICBzdHlsZUVsZW1lbnQuYXBwZW5kQ2hpbGQoZG9jdW1lbnQuY3JlYXRlVGV4dE5vZGUoY3NzKSk7XG4gIH1cbn1cbm1vZHVsZS5leHBvcnRzID0gc3R5bGVUYWdUcmFuc2Zvcm07IiwiLy8gVGhlIG1vZHVsZSBjYWNoZVxudmFyIF9fd2VicGFja19tb2R1bGVfY2FjaGVfXyA9IHt9O1xuXG4vLyBUaGUgcmVxdWlyZSBmdW5jdGlvblxuZnVuY3Rpb24gX193ZWJwYWNrX3JlcXVpcmVfXyhtb2R1bGVJZCkge1xuXHQvLyBDaGVjayBpZiBtb2R1bGUgaXMgaW4gY2FjaGVcblx0dmFyIGNhY2hlZE1vZHVsZSA9IF9fd2VicGFja19tb2R1bGVfY2FjaGVfX1ttb2R1bGVJZF07XG5cdGlmIChjYWNoZWRNb2R1bGUgIT09IHVuZGVmaW5lZCkge1xuXHRcdHJldHVybiBjYWNoZWRNb2R1bGUuZXhwb3J0cztcblx0fVxuXHQvLyBDcmVhdGUgYSBuZXcgbW9kdWxlIChhbmQgcHV0IGl0IGludG8gdGhlIGNhY2hlKVxuXHR2YXIgbW9kdWxlID0gX193ZWJwYWNrX21vZHVsZV9jYWNoZV9fW21vZHVsZUlkXSA9IHtcblx0XHRpZDogbW9kdWxlSWQsXG5cdFx0Ly8gbm8gbW9kdWxlLmxvYWRlZCBuZWVkZWRcblx0XHRleHBvcnRzOiB7fVxuXHR9O1xuXG5cdC8vIEV4ZWN1dGUgdGhlIG1vZHVsZSBmdW5jdGlvblxuXHRfX3dlYnBhY2tfbW9kdWxlc19fW21vZHVsZUlkXShtb2R1bGUsIG1vZHVsZS5leHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKTtcblxuXHQvLyBSZXR1cm4gdGhlIGV4cG9ydHMgb2YgdGhlIG1vZHVsZVxuXHRyZXR1cm4gbW9kdWxlLmV4cG9ydHM7XG59XG5cbiIsIi8vIGdldERlZmF1bHRFeHBvcnQgZnVuY3Rpb24gZm9yIGNvbXBhdGliaWxpdHkgd2l0aCBub24taGFybW9ueSBtb2R1bGVzXG5fX3dlYnBhY2tfcmVxdWlyZV9fLm4gPSAobW9kdWxlKSA9PiB7XG5cdHZhciBnZXR0ZXIgPSBtb2R1bGUgJiYgbW9kdWxlLl9fZXNNb2R1bGUgP1xuXHRcdCgpID0+IChtb2R1bGVbJ2RlZmF1bHQnXSkgOlxuXHRcdCgpID0+IChtb2R1bGUpO1xuXHRfX3dlYnBhY2tfcmVxdWlyZV9fLmQoZ2V0dGVyLCB7IGE6IGdldHRlciB9KTtcblx0cmV0dXJuIGdldHRlcjtcbn07IiwiLy8gZGVmaW5lIGdldHRlciBmdW5jdGlvbnMgZm9yIGhhcm1vbnkgZXhwb3J0c1xuX193ZWJwYWNrX3JlcXVpcmVfXy5kID0gKGV4cG9ydHMsIGRlZmluaXRpb24pID0+IHtcblx0Zm9yKHZhciBrZXkgaW4gZGVmaW5pdGlvbikge1xuXHRcdGlmKF9fd2VicGFja19yZXF1aXJlX18ubyhkZWZpbml0aW9uLCBrZXkpICYmICFfX3dlYnBhY2tfcmVxdWlyZV9fLm8oZXhwb3J0cywga2V5KSkge1xuXHRcdFx0T2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIGtleSwgeyBlbnVtZXJhYmxlOiB0cnVlLCBnZXQ6IGRlZmluaXRpb25ba2V5XSB9KTtcblx0XHR9XG5cdH1cbn07IiwiX193ZWJwYWNrX3JlcXVpcmVfXy5vID0gKG9iaiwgcHJvcCkgPT4gKE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChvYmosIHByb3ApKSIsIl9fd2VicGFja19yZXF1aXJlX18ubmMgPSB1bmRlZmluZWQ7IiwiXG4gICAgICBpbXBvcnQgQVBJIGZyb20gXCIhLi4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvaW5qZWN0U3R5bGVzSW50b1N0eWxlVGFnLmpzXCI7XG4gICAgICBpbXBvcnQgZG9tQVBJIGZyb20gXCIhLi4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvc3R5bGVEb21BUEkuanNcIjtcbiAgICAgIGltcG9ydCBpbnNlcnRGbiBmcm9tIFwiIS4uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL2luc2VydEJ5U2VsZWN0b3IuanNcIjtcbiAgICAgIGltcG9ydCBzZXRBdHRyaWJ1dGVzIGZyb20gXCIhLi4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvc2V0QXR0cmlidXRlc1dpdGhvdXRBdHRyaWJ1dGVzLmpzXCI7XG4gICAgICBpbXBvcnQgaW5zZXJ0U3R5bGVFbGVtZW50IGZyb20gXCIhLi4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvaW5zZXJ0U3R5bGVFbGVtZW50LmpzXCI7XG4gICAgICBpbXBvcnQgc3R5bGVUYWdUcmFuc2Zvcm1GbiBmcm9tIFwiIS4uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL3N0eWxlVGFnVHJhbnNmb3JtLmpzXCI7XG4gICAgICBpbXBvcnQgY29udGVudCwgKiBhcyBuYW1lZEV4cG9ydCBmcm9tIFwiISEuLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L2Nqcy5qcyEuL3N0eWxlLmNzc1wiO1xuICAgICAgXG4gICAgICBcblxudmFyIG9wdGlvbnMgPSB7fTtcblxub3B0aW9ucy5zdHlsZVRhZ1RyYW5zZm9ybSA9IHN0eWxlVGFnVHJhbnNmb3JtRm47XG5vcHRpb25zLnNldEF0dHJpYnV0ZXMgPSBzZXRBdHRyaWJ1dGVzO1xub3B0aW9ucy5pbnNlcnQgPSBpbnNlcnRGbi5iaW5kKG51bGwsIFwiaGVhZFwiKTtcbm9wdGlvbnMuZG9tQVBJID0gZG9tQVBJO1xub3B0aW9ucy5pbnNlcnRTdHlsZUVsZW1lbnQgPSBpbnNlcnRTdHlsZUVsZW1lbnQ7XG5cbnZhciB1cGRhdGUgPSBBUEkoY29udGVudCwgb3B0aW9ucyk7XG5cblxuXG5leHBvcnQgKiBmcm9tIFwiISEuLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L2Nqcy5qcyEuL3N0eWxlLmNzc1wiO1xuICAgICAgIGV4cG9ydCBkZWZhdWx0IGNvbnRlbnQgJiYgY29udGVudC5sb2NhbHMgPyBjb250ZW50LmxvY2FscyA6IHVuZGVmaW5lZDtcbiIsImZ1bmN0aW9uIGlucHV0TGFiZWwoaW5wdXRFbGVtZW50LCBsYWJlbFRleHQpIHtcbiAgICBjb25zdCBpbnB1dExhYmVsID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnbGFiZWwnKTtcblxuICAgIGlucHV0TGFiZWwuc2V0QXR0cmlidXRlKCdmb3InLCBpbnB1dEVsZW1lbnQuZ2V0QXR0cmlidXRlKCdpZCcpKTtcbiAgICBpbnB1dExhYmVsLnRleHRDb250ZW50ID0gbGFiZWxUZXh0O1xuXG4gICAgcmV0dXJuIGlucHV0TGFiZWw7XG59XG5cbmV4cG9ydCB7IGlucHV0TGFiZWwgfTsiLCJmdW5jdGlvbiBpbnB1dFNwYW4oaW5wdXRFbGVtZW50KSB7XG4gICAgY29uc3QgaW5wdXRTcGFuID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnc3BhbicpO1xuICAgIGlucHV0U3Bhbi5zZXRBdHRyaWJ1dGUoJ2RhdGEtZXJyb3ItdHlwZScsIGlucHV0RWxlbWVudC5nZXRBdHRyaWJ1dGUoJ2lkJykpO1xuICAgIHJldHVybiBpbnB1dFNwYW47XG59XG5cbmV4cG9ydCB7IGlucHV0U3BhbiB9OyIsImltcG9ydCAnLi9zdHlsZS5jc3MnO1xuaW1wb3J0IHsgZm9ybSB9IGZyb20gJy4vY29tcG9uZW50cy9mb3JtLmpzJztcblxuKGZ1bmN0aW9uKCkge1xuICAgIGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJ2JvZHknKS5hcHBlbmRDaGlsZChmb3JtKCkpO1xufSkoKTsiLCJpbXBvcnQgeyBpbnB1dExhYmVsIH0gZnJvbSBcIi4vaW5wdXRMYWJlbC5qc1wiO1xuaW1wb3J0IHsgaW5wdXRTcGFuIH0gZnJvbSBcIi4vaW5wdXRTcGFuLmpzXCI7XG5pbXBvcnQgeyBlbWFpbElucHV0IH0gZnJvbSBcIi4vZW1haWxJbnB1dC5qc1wiO1xuaW1wb3J0IHsgY291bnRyeUlucHV0IH0gZnJvbSBcIi4vY291bnRyeUlucHV0LmpzXCI7XG5pbXBvcnQgeyBjb3VudHJ5TGlzdCB9IGZyb20gXCIuL2NvdW50cnlMaXN0LmpzXCI7XG5pbXBvcnQgeyBwb3N0YWxDb2RlSW5wdXQgfSBmcm9tIFwiLi9wb3N0YWxDb2RlSW5wdXQuanNcIjtcbmltcG9ydCB7IHBhc3N3b3JkSW5wdXQgfSBmcm9tIFwiLi9wYXNzd29yZElucHV0LmpzXCI7XG5pbXBvcnQgeyBjb25maXJtUGFzc3dvcmRJbnB1dCB9IGZyb20gXCIuL2NvbmZpcm1QYXNzd29yZElucHV0LmpzXCI7XG5pbXBvcnQgeyBzdWJtaXRCdXR0b24gfSBmcm9tIFwiLi9zdWJtaXRCdXR0b24uanNcIjtcblxuZnVuY3Rpb24gZm9ybSgpIHtcbiAgICBjb25zdCBmb3JtID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZm9ybScpO1xuICAgIGZvcm0ubm9WYWxpZGF0ZSA9IHRydWU7XG5cbiAgICBjb25zdCBlbWFpbElucHV0RGl2ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZGl2Jyk7XG4gICAgY29uc3QgZW1haWwgPSBlbWFpbElucHV0KCk7XG4gICAgZW1haWxJbnB1dERpdi5hcHBlbmRDaGlsZChpbnB1dExhYmVsKGVtYWlsLCBcIkVtYWlsXCIpKTtcbiAgICBlbWFpbElucHV0RGl2LmFwcGVuZENoaWxkKGVtYWlsKTtcbiAgICBlbWFpbElucHV0RGl2LmFwcGVuZENoaWxkKGlucHV0U3BhbihlbWFpbCkpO1xuICAgIFxuXG4gICAgY29uc3QgY291bnRyeUlucHV0RGl2ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZGl2Jyk7XG4gICAgY29uc3QgY291bnRyeSA9IGNvdW50cnlJbnB1dCgpO1xuICAgIGNvbnN0IGxpc3RPZkNvdW50cmllcyA9IGNvdW50cnlMaXN0KCk7XG4gICAgY291bnRyeUlucHV0RGl2LmFwcGVuZENoaWxkKGlucHV0TGFiZWwoY291bnRyeSwgJ0NvdW50cnknKSk7XG4gICAgY291bnRyeUlucHV0RGl2LmFwcGVuZENoaWxkKGNvdW50cnkpO1xuICAgIGNvdW50cnlJbnB1dERpdi5hcHBlbmRDaGlsZChsaXN0T2ZDb3VudHJpZXMpO1xuICAgIGNvdW50cnlJbnB1dERpdi5hcHBlbmRDaGlsZChpbnB1dFNwYW4oY291bnRyeSkpO1xuICAgIFxuXG4gICAgY29uc3QgcG9zdGFsQ29kZURpdiA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RpdicpO1xuICAgIGNvbnN0IHBvc3RhbENvZGUgPSBwb3N0YWxDb2RlSW5wdXQoKTtcbiAgICBwb3N0YWxDb2RlRGl2LmFwcGVuZENoaWxkKGlucHV0TGFiZWwocG9zdGFsQ29kZSwgJ1Bvc3RhbCBjb2RlJykpO1xuICAgIHBvc3RhbENvZGVEaXYuYXBwZW5kQ2hpbGQocG9zdGFsQ29kZSk7XG4gICAgcG9zdGFsQ29kZURpdi5hcHBlbmRDaGlsZChpbnB1dFNwYW4ocG9zdGFsQ29kZSkpO1xuICAgIFxuXG4gICAgY29uc3QgcGFzc3dvcmREaXYgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkaXYnKTtcbiAgICBjb25zdCBwYXNzd29yZCA9IHBhc3N3b3JkSW5wdXQoKTtcbiAgICBwYXNzd29yZERpdi5hcHBlbmRDaGlsZChpbnB1dExhYmVsKHBhc3N3b3JkLCAnUGFzc3dvcmQnKSk7XG4gICAgcGFzc3dvcmREaXYuYXBwZW5kQ2hpbGQocGFzc3dvcmQpO1xuICAgIHBhc3N3b3JkRGl2LmFwcGVuZENoaWxkKGlucHV0U3BhbihwYXNzd29yZCkpO1xuICAgIFxuXG4gICAgLy8gLS0tLS0gJ0NvbmZpcm0gUGFzc3dvcmQnIGZpZWxkIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuICAgIGNvbnN0IGNvbmZpcm1QYXNzd29yZERpdiA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RpdicpO1xuICAgIGNvbnN0IGNvbmZpcm1QYXNzd29yZCA9IGNvbmZpcm1QYXNzd29yZElucHV0KCk7XG4gICAgY29uc3QgY29uZmlybVBhc3N3b3JkU3BhbiA9IGlucHV0U3Bhbihjb25maXJtUGFzc3dvcmQpO1xuICAgIFxuICAgIGNvbmZpcm1QYXNzd29yZERpdi5hcHBlbmRDaGlsZChpbnB1dExhYmVsKGNvbmZpcm1QYXNzd29yZCwgJ0NvbmZpcm0gcGFzc3dvcmQnKSk7XG4gICAgY29uZmlybVBhc3N3b3JkRGl2LmFwcGVuZENoaWxkKGNvbmZpcm1QYXNzd29yZCk7XG4gICAgY29uZmlybVBhc3N3b3JkRGl2LmFwcGVuZENoaWxkKGNvbmZpcm1QYXNzd29yZFNwYW4pO1xuXG4gICAgY29uZmlybVBhc3N3b3JkLmFkZEV2ZW50TGlzdGVuZXIoJ2ZvY3Vzb3V0JywgKCkgPT4ge1xuICAgICAgICBpZiAoY29uZmlybVBhc3N3b3JkLnZhbHVlICE9PSBwYXNzd29yZC52YWx1ZSkge1xuICAgICAgICAgICAgY29uZmlybVBhc3N3b3JkU3Bhbi5jbGFzc05hbWUgPSBcImFjdGl2ZVwiO1xuICAgICAgICAgICAgY29uZmlybVBhc3N3b3JkU3Bhbi50ZXh0Q29udGVudCA9IFwiVGhlIHBhc3N3b3JkcyBkb24ndCBtYXRjaC5cIjtcbiAgICAgICAgfSBlbHNlIGlmIChjb25maXJtUGFzc3dvcmQudmFsdWUgPT09IHBhc3N3b3JkLnZhbHVlKSB7XG4gICAgICAgICAgICBjb25maXJtUGFzc3dvcmRTcGFuLmNsYXNzTmFtZSA9IFwiXCI7XG4gICAgICAgICAgICBjb25maXJtUGFzc3dvcmRTcGFuLnRleHRDb250ZW50ID0gXCJcIjtcbiAgICAgICAgfVxuICAgIH0pO1xuICAgIFxuICAgIC8vIC0tLS0tIEFzc2VtYmxpbmcgdGhlIGZvcm0gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiAgICBmb3JtLmFwcGVuZENoaWxkKGVtYWlsSW5wdXREaXYpO1xuICAgIGZvcm0uYXBwZW5kQ2hpbGQoY291bnRyeUlucHV0RGl2KTtcbiAgICBmb3JtLmFwcGVuZENoaWxkKHBvc3RhbENvZGVEaXYpO1xuICAgIGZvcm0uYXBwZW5kQ2hpbGQocGFzc3dvcmREaXYpO1xuICAgIGZvcm0uYXBwZW5kQ2hpbGQoY29uZmlybVBhc3N3b3JkRGl2KTtcblxuICAgIGNvbnN0IHN1Ym1pdCA9IHN1Ym1pdEJ1dHRvbignU2lnbiB1cCcpO1xuICAgIGZvcm0uYXBwZW5kQ2hpbGQoc3VibWl0KTtcblxuICAgIHJldHVybiBmb3JtO1xufVxuXG5leHBvcnQgeyBmb3JtIH07IiwiZnVuY3Rpb24gZW1haWxJbnB1dCgpIHtcbiAgICBjb25zdCBlbWFpbElucHV0ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnaW5wdXQnKTtcblxuICAgIGVtYWlsSW5wdXQuc2V0QXR0cmlidXRlKCd0eXBlJywgJ2VtYWlsJyk7XG4gICAgZW1haWxJbnB1dC5zZXRBdHRyaWJ1dGUoJ2lkJywgJ2VtYWlsJyk7XG4gICAgZW1haWxJbnB1dC5zZXRBdHRyaWJ1dGUoJ25hbWUnLCAnZW1haWwnKTtcblxuICAgIHJldHVybiBlbWFpbElucHV0O1xufVxuXG5leHBvcnQgeyBlbWFpbElucHV0IH07IiwiZnVuY3Rpb24gY291bnRyeUlucHV0KCkge1xuICAgIGNvbnN0IGNvdW50cnlJbnB1dCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2lucHV0Jyk7XG5cbiAgICBjb3VudHJ5SW5wdXQuc2V0QXR0cmlidXRlKCdsaXN0JywgJ2NvdW50cmllcycpO1xuICAgIGNvdW50cnlJbnB1dC5zZXRBdHRyaWJ1dGUoJ2lkJywgJ2NvdW50cnknKTtcbiAgICBjb3VudHJ5SW5wdXQuc2V0QXR0cmlidXRlKCduYW1lJywgJ2NvdW50cnknKTtcblxuICAgIHJldHVybiBjb3VudHJ5SW5wdXQ7XG59XG5cbmV4cG9ydCB7IGNvdW50cnlJbnB1dCB9OyIsImZ1bmN0aW9uIGNvdW50cnlMaXN0KCkge1xuICAgIGNvbnN0IGRhdGFsaXN0ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZGF0YWxpc3QnKTtcbiAgICBkYXRhbGlzdC5zZXRBdHRyaWJ1dGUoJ2lkJywgJ2NvdW50cmllcycpO1xuXG4gICAgY29uc3QgYWxsQ291bnRyaWVzID0gW1xuICAgICAgICBcIkFmZ2hhbmlzdGFuXCIsXG4gICAgICAgIFwiQWxiYW5pYVwiLFxuICAgICAgICBcIkFsZ2VyaWFcIixcbiAgICAgICAgXCJBbWVyaWNhbiBTYW1vYVwiLFxuICAgICAgICBcIkFuZG9ycmFcIixcbiAgICAgICAgXCJBbmdvbGFcIixcbiAgICAgICAgXCJBbmd1aWxsYVwiLFxuICAgICAgICBcIkFudGFyY3RpY2FcIixcbiAgICAgICAgXCJBbnRpZ3VhIGFuZCBCYXJidWRhXCIsXG4gICAgICAgIFwiQXJnZW50aW5hXCIsXG4gICAgICAgIFwiQXJtZW5pYVwiLFxuICAgICAgICBcIkFydWJhXCIsXG4gICAgICAgIFwiQXVzdHJhbGlhXCIsXG4gICAgICAgIFwiQXVzdHJpYVwiLFxuICAgICAgICBcIkF6ZXJiYWlqYW5cIixcbiAgICAgICAgXCJCYWhhbWFzICh0aGUpXCIsXG4gICAgICAgIFwiQmFocmFpblwiLFxuICAgICAgICBcIkJhbmdsYWRlc2hcIixcbiAgICAgICAgXCJCYXJiYWRvc1wiLFxuICAgICAgICBcIkJlbGFydXNcIixcbiAgICAgICAgXCJCZWxnaXVtXCIsXG4gICAgICAgIFwiQmVsaXplXCIsXG4gICAgICAgIFwiQmVuaW5cIixcbiAgICAgICAgXCJCZXJtdWRhXCIsXG4gICAgICAgIFwiQmh1dGFuXCIsXG4gICAgICAgIFwiQm9saXZpYSAoUGx1cmluYXRpb25hbCBTdGF0ZSBvZilcIixcbiAgICAgICAgXCJCb25haXJlLCBTaW50IEV1c3RhdGl1cyBhbmQgU2FiYVwiLFxuICAgICAgICBcIkJvc25pYSBhbmQgSGVyemVnb3ZpbmFcIixcbiAgICAgICAgXCJCb3Rzd2FuYVwiLFxuICAgICAgICBcIkJvdXZldCBJc2xhbmRcIixcbiAgICAgICAgXCJCcmF6aWxcIixcbiAgICAgICAgXCJCcml0aXNoIEluZGlhbiBPY2VhbiBUZXJyaXRvcnkgKHRoZSlcIixcbiAgICAgICAgXCJCcnVuZWkgRGFydXNzYWxhbVwiLFxuICAgICAgICBcIkJ1bGdhcmlhXCIsXG4gICAgICAgIFwiQnVya2luYSBGYXNvXCIsXG4gICAgICAgIFwiQnVydW5kaVwiLFxuICAgICAgICBcIkNhYm8gVmVyZGVcIixcbiAgICAgICAgXCJDYW1ib2RpYVwiLFxuICAgICAgICBcIkNhbWVyb29uXCIsXG4gICAgICAgIFwiQ2FuYWRhXCIsXG4gICAgICAgIFwiQ2F5bWFuIElzbGFuZHMgKHRoZSlcIixcbiAgICAgICAgXCJDZW50cmFsIEFmcmljYW4gUmVwdWJsaWMgKHRoZSlcIixcbiAgICAgICAgXCJDaGFkXCIsXG4gICAgICAgIFwiQ2hpbGVcIixcbiAgICAgICAgXCJDaGluYVwiLFxuICAgICAgICBcIkNocmlzdG1hcyBJc2xhbmRcIixcbiAgICAgICAgXCJDb2NvcyAoS2VlbGluZykgSXNsYW5kcyAodGhlKVwiLFxuICAgICAgICBcIkNvbG9tYmlhXCIsXG4gICAgICAgIFwiQ29tb3JvcyAodGhlKVwiLFxuICAgICAgICBcIkNvbmdvICh0aGUgRGVtb2NyYXRpYyBSZXB1YmxpYyBvZiB0aGUpXCIsXG4gICAgICAgIFwiQ29uZ28gKHRoZSlcIixcbiAgICAgICAgXCJDb29rIElzbGFuZHMgKHRoZSlcIixcbiAgICAgICAgXCJDb3N0YSBSaWNhXCIsXG4gICAgICAgIFwiQ3JvYXRpYVwiLFxuICAgICAgICBcIkN1YmFcIixcbiAgICAgICAgXCJDdXJhw6dhb1wiLFxuICAgICAgICBcIkN5cHJ1c1wiLFxuICAgICAgICBcIkN6ZWNoaWFcIixcbiAgICAgICAgXCJDw7R0ZSBkJ0l2b2lyZVwiLFxuICAgICAgICBcIkRlbm1hcmtcIixcbiAgICAgICAgXCJEamlib3V0aVwiLFxuICAgICAgICBcIkRvbWluaWNhXCIsXG4gICAgICAgIFwiRG9taW5pY2FuIFJlcHVibGljICh0aGUpXCIsXG4gICAgICAgIFwiRWN1YWRvclwiLFxuICAgICAgICBcIkVneXB0XCIsXG4gICAgICAgIFwiRWwgU2FsdmFkb3JcIixcbiAgICAgICAgXCJFcXVhdG9yaWFsIEd1aW5lYVwiLFxuICAgICAgICBcIkVyaXRyZWFcIixcbiAgICAgICAgXCJFc3RvbmlhXCIsXG4gICAgICAgIFwiRXN3YXRpbmlcIixcbiAgICAgICAgXCJFdGhpb3BpYVwiLFxuICAgICAgICBcIkZhbGtsYW5kIElzbGFuZHMgKHRoZSkgW01hbHZpbmFzXVwiLFxuICAgICAgICBcIkZhcm9lIElzbGFuZHMgKHRoZSlcIixcbiAgICAgICAgXCJGaWppXCIsXG4gICAgICAgIFwiRmlubGFuZFwiLFxuICAgICAgICBcIkZyYW5jZVwiLFxuICAgICAgICBcIkZyZW5jaCBHdWlhbmFcIixcbiAgICAgICAgXCJGcmVuY2ggUG9seW5lc2lhXCIsXG4gICAgICAgIFwiRnJlbmNoIFNvdXRoZXJuIFRlcnJpdG9yaWVzICh0aGUpXCIsXG4gICAgICAgIFwiR2Fib25cIixcbiAgICAgICAgXCJHYW1iaWEgKHRoZSlcIixcbiAgICAgICAgXCJHZW9yZ2lhXCIsXG4gICAgICAgIFwiR2VybWFueVwiLFxuICAgICAgICBcIkdoYW5hXCIsXG4gICAgICAgIFwiR2licmFsdGFyXCIsXG4gICAgICAgIFwiR3JlZWNlXCIsXG4gICAgICAgIFwiR3JlZW5sYW5kXCIsXG4gICAgICAgIFwiR3JlbmFkYVwiLFxuICAgICAgICBcIkd1YWRlbG91cGVcIixcbiAgICAgICAgXCJHdWFtXCIsXG4gICAgICAgIFwiR3VhdGVtYWxhXCIsXG4gICAgICAgIFwiR3Vlcm5zZXlcIixcbiAgICAgICAgXCJHdWluZWFcIixcbiAgICAgICAgXCJHdWluZWEtQmlzc2F1XCIsXG4gICAgICAgIFwiR3V5YW5hXCIsXG4gICAgICAgIFwiSGFpdGlcIixcbiAgICAgICAgXCJIZWFyZCBJc2xhbmQgYW5kIE1jRG9uYWxkIElzbGFuZHNcIixcbiAgICAgICAgXCJIb2x5IFNlZSAodGhlKVwiLFxuICAgICAgICBcIkhvbmR1cmFzXCIsXG4gICAgICAgIFwiSG9uZyBLb25nXCIsXG4gICAgICAgIFwiSHVuZ2FyeVwiLFxuICAgICAgICBcIkljZWxhbmRcIixcbiAgICAgICAgXCJJbmRpYVwiLFxuICAgICAgICBcIkluZG9uZXNpYVwiLFxuICAgICAgICBcIklyYW4gKElzbGFtaWMgUmVwdWJsaWMgb2YpXCIsXG4gICAgICAgIFwiSXJhcVwiLFxuICAgICAgICBcIklyZWxhbmRcIixcbiAgICAgICAgXCJJc2xlIG9mIE1hblwiLFxuICAgICAgICBcIklzcmFlbFwiLFxuICAgICAgICBcIkl0YWx5XCIsXG4gICAgICAgIFwiSmFtYWljYVwiLFxuICAgICAgICBcIkphcGFuXCIsXG4gICAgICAgIFwiSmVyc2V5XCIsXG4gICAgICAgIFwiSm9yZGFuXCIsXG4gICAgICAgIFwiS2F6YWtoc3RhblwiLFxuICAgICAgICBcIktlbnlhXCIsXG4gICAgICAgIFwiS2lyaWJhdGlcIixcbiAgICAgICAgXCJLb3JlYSAodGhlIERlbW9jcmF0aWMgUGVvcGxlJ3MgUmVwdWJsaWMgb2YpXCIsXG4gICAgICAgIFwiS29yZWEgKHRoZSBSZXB1YmxpYyBvZilcIixcbiAgICAgICAgXCJLdXdhaXRcIixcbiAgICAgICAgXCJLeXJneXpzdGFuXCIsXG4gICAgICAgIFwiTGFvIFBlb3BsZSdzIERlbW9jcmF0aWMgUmVwdWJsaWMgKHRoZSlcIixcbiAgICAgICAgXCJMYXR2aWFcIixcbiAgICAgICAgXCJMZWJhbm9uXCIsXG4gICAgICAgIFwiTGVzb3Rob1wiLFxuICAgICAgICBcIkxpYmVyaWFcIixcbiAgICAgICAgXCJMaWJ5YVwiLFxuICAgICAgICBcIkxpZWNodGVuc3RlaW5cIixcbiAgICAgICAgXCJMaXRodWFuaWFcIixcbiAgICAgICAgXCJMdXhlbWJvdXJnXCIsXG4gICAgICAgIFwiTWFjYW9cIixcbiAgICAgICAgXCJNYWRhZ2FzY2FyXCIsXG4gICAgICAgIFwiTWFsYXdpXCIsXG4gICAgICAgIFwiTWFsYXlzaWFcIixcbiAgICAgICAgXCJNYWxkaXZlc1wiLFxuICAgICAgICBcIk1hbGlcIixcbiAgICAgICAgXCJNYWx0YVwiLFxuICAgICAgICBcIk1hcnNoYWxsIElzbGFuZHMgKHRoZSlcIixcbiAgICAgICAgXCJNYXJ0aW5pcXVlXCIsXG4gICAgICAgIFwiTWF1cml0YW5pYVwiLFxuICAgICAgICBcIk1hdXJpdGl1c1wiLFxuICAgICAgICBcIk1heW90dGVcIixcbiAgICAgICAgXCJNZXhpY29cIixcbiAgICAgICAgXCJNaWNyb25lc2lhIChGZWRlcmF0ZWQgU3RhdGVzIG9mKVwiLFxuICAgICAgICBcIk1vbGRvdmEgKHRoZSBSZXB1YmxpYyBvZilcIixcbiAgICAgICAgXCJNb25hY29cIixcbiAgICAgICAgXCJNb25nb2xpYVwiLFxuICAgICAgICBcIk1vbnRlbmVncm9cIixcbiAgICAgICAgXCJNb250c2VycmF0XCIsXG4gICAgICAgIFwiTW9yb2Njb1wiLFxuICAgICAgICBcIk1vemFtYmlxdWVcIixcbiAgICAgICAgXCJNeWFubWFyXCIsXG4gICAgICAgIFwiTmFtaWJpYVwiLFxuICAgICAgICBcIk5hdXJ1XCIsXG4gICAgICAgIFwiTmVwYWxcIixcbiAgICAgICAgXCJOZXRoZXJsYW5kcyAodGhlKVwiLFxuICAgICAgICBcIk5ldyBDYWxlZG9uaWFcIixcbiAgICAgICAgXCJOZXcgWmVhbGFuZFwiLFxuICAgICAgICBcIk5pY2FyYWd1YVwiLFxuICAgICAgICBcIk5pZ2VyICh0aGUpXCIsXG4gICAgICAgIFwiTmlnZXJpYVwiLFxuICAgICAgICBcIk5pdWVcIixcbiAgICAgICAgXCJOb3Jmb2xrIElzbGFuZFwiLFxuICAgICAgICBcIk5vcnRoZXJuIE1hcmlhbmEgSXNsYW5kcyAodGhlKVwiLFxuICAgICAgICBcIk5vcndheVwiLFxuICAgICAgICBcIk9tYW5cIixcbiAgICAgICAgXCJQYWtpc3RhblwiLFxuICAgICAgICBcIlBhbGF1XCIsXG4gICAgICAgIFwiUGFsZXN0aW5lLCBTdGF0ZSBvZlwiLFxuICAgICAgICBcIlBhbmFtYVwiLFxuICAgICAgICBcIlBhcHVhIE5ldyBHdWluZWFcIixcbiAgICAgICAgXCJQYXJhZ3VheVwiLFxuICAgICAgICBcIlBlcnVcIixcbiAgICAgICAgXCJQaGlsaXBwaW5lcyAodGhlKVwiLFxuICAgICAgICBcIlBpdGNhaXJuXCIsXG4gICAgICAgIFwiUG9sYW5kXCIsXG4gICAgICAgIFwiUG9ydHVnYWxcIixcbiAgICAgICAgXCJQdWVydG8gUmljb1wiLFxuICAgICAgICBcIlFhdGFyXCIsXG4gICAgICAgIFwiUmVwdWJsaWMgb2YgTm9ydGggTWFjZWRvbmlhXCIsXG4gICAgICAgIFwiUm9tYW5pYVwiLFxuICAgICAgICBcIlJ1c3NpYW4gRmVkZXJhdGlvbiAodGhlKVwiLFxuICAgICAgICBcIlJ3YW5kYVwiLFxuICAgICAgICBcIlLDqXVuaW9uXCIsXG4gICAgICAgIFwiU2FpbnQgQmFydGjDqWxlbXlcIixcbiAgICAgICAgXCJTYWludCBIZWxlbmEsIEFzY2Vuc2lvbiBhbmQgVHJpc3RhbiBkYSBDdW5oYVwiLFxuICAgICAgICBcIlNhaW50IEtpdHRzIGFuZCBOZXZpc1wiLFxuICAgICAgICBcIlNhaW50IEx1Y2lhXCIsXG4gICAgICAgIFwiU2FpbnQgTWFydGluIChGcmVuY2ggcGFydClcIixcbiAgICAgICAgXCJTYWludCBQaWVycmUgYW5kIE1pcXVlbG9uXCIsXG4gICAgICAgIFwiU2FpbnQgVmluY2VudCBhbmQgdGhlIEdyZW5hZGluZXNcIixcbiAgICAgICAgXCJTYW1vYVwiLFxuICAgICAgICBcIlNhbiBNYXJpbm9cIixcbiAgICAgICAgXCJTYW8gVG9tZSBhbmQgUHJpbmNpcGVcIixcbiAgICAgICAgXCJTYXVkaSBBcmFiaWFcIixcbiAgICAgICAgXCJTZW5lZ2FsXCIsXG4gICAgICAgIFwiU2VyYmlhXCIsXG4gICAgICAgIFwiU2V5Y2hlbGxlc1wiLFxuICAgICAgICBcIlNpZXJyYSBMZW9uZVwiLFxuICAgICAgICBcIlNpbmdhcG9yZVwiLFxuICAgICAgICBcIlNpbnQgTWFhcnRlbiAoRHV0Y2ggcGFydClcIixcbiAgICAgICAgXCJTbG92YWtpYVwiLFxuICAgICAgICBcIlNsb3ZlbmlhXCIsXG4gICAgICAgIFwiU29sb21vbiBJc2xhbmRzXCIsXG4gICAgICAgIFwiU29tYWxpYVwiLFxuICAgICAgICBcIlNvdXRoIEFmcmljYVwiLFxuICAgICAgICBcIlNvdXRoIEdlb3JnaWEgYW5kIHRoZSBTb3V0aCBTYW5kd2ljaCBJc2xhbmRzXCIsXG4gICAgICAgIFwiU291dGggU3VkYW5cIixcbiAgICAgICAgXCJTcGFpblwiLFxuICAgICAgICBcIlNyaSBMYW5rYVwiLFxuICAgICAgICBcIlN1ZGFuICh0aGUpXCIsXG4gICAgICAgIFwiU3VyaW5hbWVcIixcbiAgICAgICAgXCJTdmFsYmFyZCBhbmQgSmFuIE1heWVuXCIsXG4gICAgICAgIFwiU3dlZGVuXCIsXG4gICAgICAgIFwiU3dpdHplcmxhbmRcIixcbiAgICAgICAgXCJTeXJpYW4gQXJhYiBSZXB1YmxpY1wiLFxuICAgICAgICBcIlRhaXdhblwiLFxuICAgICAgICBcIlRhamlraXN0YW5cIixcbiAgICAgICAgXCJUYW56YW5pYSwgVW5pdGVkIFJlcHVibGljIG9mXCIsXG4gICAgICAgIFwiVGhhaWxhbmRcIixcbiAgICAgICAgXCJUaW1vci1MZXN0ZVwiLFxuICAgICAgICBcIlRvZ29cIixcbiAgICAgICAgXCJUb2tlbGF1XCIsXG4gICAgICAgIFwiVG9uZ2FcIixcbiAgICAgICAgXCJUcmluaWRhZCBhbmQgVG9iYWdvXCIsXG4gICAgICAgIFwiVHVuaXNpYVwiLFxuICAgICAgICBcIlR1cmtleVwiLFxuICAgICAgICBcIlR1cmttZW5pc3RhblwiLFxuICAgICAgICBcIlR1cmtzIGFuZCBDYWljb3MgSXNsYW5kcyAodGhlKVwiLFxuICAgICAgICBcIlR1dmFsdVwiLFxuICAgICAgICBcIlVnYW5kYVwiLFxuICAgICAgICBcIlVrcmFpbmVcIixcbiAgICAgICAgXCJVbml0ZWQgQXJhYiBFbWlyYXRlcyAodGhlKVwiLFxuICAgICAgICBcIlVuaXRlZCBLaW5nZG9tIG9mIEdyZWF0IEJyaXRhaW4gYW5kIE5vcnRoZXJuIElyZWxhbmQgKHRoZSlcIixcbiAgICAgICAgXCJVbml0ZWQgU3RhdGVzIE1pbm9yIE91dGx5aW5nIElzbGFuZHMgKHRoZSlcIixcbiAgICAgICAgXCJVbml0ZWQgU3RhdGVzIG9mIEFtZXJpY2EgKHRoZSlcIixcbiAgICAgICAgXCJVcnVndWF5XCIsXG4gICAgICAgIFwiVXpiZWtpc3RhblwiLFxuICAgICAgICBcIlZhbnVhdHVcIixcbiAgICAgICAgXCJWZW5lenVlbGEgKEJvbGl2YXJpYW4gUmVwdWJsaWMgb2YpXCIsXG4gICAgICAgIFwiVmlldCBOYW1cIixcbiAgICAgICAgXCJWaXJnaW4gSXNsYW5kcyAoQnJpdGlzaClcIixcbiAgICAgICAgXCJWaXJnaW4gSXNsYW5kcyAoVS5TLilcIixcbiAgICAgICAgXCJXYWxsaXMgYW5kIEZ1dHVuYVwiLFxuICAgICAgICBcIldlc3Rlcm4gU2FoYXJhXCIsXG4gICAgICAgIFwiWWVtZW5cIixcbiAgICAgICAgXCJaYW1iaWFcIixcbiAgICAgICAgXCJaaW1iYWJ3ZVwiLFxuICAgICAgICBcIsOFbGFuZCBJc2xhbmRzXCJcbiAgICBdO1xuXG4gICAgYWxsQ291bnRyaWVzLmZvckVhY2goY291bnRyeSA9PiB7XG4gICAgICAgIGNvbnN0IG9wdGlvbiA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ29wdGlvbicpO1xuICAgICAgICBvcHRpb24uc2V0QXR0cmlidXRlKCd2YWx1ZScsIGNvdW50cnkpO1xuICAgICAgICBkYXRhbGlzdC5hcHBlbmRDaGlsZChvcHRpb24pO1xuICAgIH0pO1xuXG4gICAgcmV0dXJuIGRhdGFsaXN0O1xufVxuXG5leHBvcnQgeyBjb3VudHJ5TGlzdCB9OyIsImZ1bmN0aW9uIHBvc3RhbENvZGVJbnB1dCgpIHtcbiAgICBjb25zdCBwb3N0YWxDb2RlSW5wdXQgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdpbnB1dCcpO1xuXG4gICAgcG9zdGFsQ29kZUlucHV0LnNldEF0dHJpYnV0ZSgndHlwZScsICd0ZWwnKTtcbiAgICBwb3N0YWxDb2RlSW5wdXQuc2V0QXR0cmlidXRlKCdpZCcsICdwb3N0YWwtY29kZScpO1xuICAgIHBvc3RhbENvZGVJbnB1dC5zZXRBdHRyaWJ1dGUoJ25hbWUnLCAncG9zdGFsLWNvZGUnKTtcblxuICAgIHJldHVybiBwb3N0YWxDb2RlSW5wdXQ7XG59XG5cbmV4cG9ydCB7IHBvc3RhbENvZGVJbnB1dCB9OyIsImZ1bmN0aW9uIHBhc3N3b3JkSW5wdXQoKSB7XG4gICAgY29uc3QgcGFzc3dvcmRJbnB1dCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2lucHV0Jyk7XG5cbiAgICBwYXNzd29yZElucHV0LnNldEF0dHJpYnV0ZSgndHlwZScsICdwYXNzd29yZCcpO1xuICAgIHBhc3N3b3JkSW5wdXQuc2V0QXR0cmlidXRlKCdpZCcsICdwYXNzd29yZCcpO1xuICAgIHBhc3N3b3JkSW5wdXQuc2V0QXR0cmlidXRlKCduYW1lJywgJ3Bhc3N3b3JkJyk7XG5cbiAgICByZXR1cm4gcGFzc3dvcmRJbnB1dDtcbn1cblxuZXhwb3J0IHsgcGFzc3dvcmRJbnB1dCB9OyIsImZ1bmN0aW9uIGNvbmZpcm1QYXNzd29yZElucHV0KCkge1xuICAgIGNvbnN0IGNvbmZpcm1QYXNzd29yZElucHV0ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnaW5wdXQnKTtcblxuICAgIGNvbmZpcm1QYXNzd29yZElucHV0LnNldEF0dHJpYnV0ZSgndHlwZScsICdwYXNzd29yZCcpO1xuICAgIGNvbmZpcm1QYXNzd29yZElucHV0LnNldEF0dHJpYnV0ZSgnaWQnLCAnY29uZmlybS1wYXNzd29yZCcpO1xuICAgIGNvbmZpcm1QYXNzd29yZElucHV0LnNldEF0dHJpYnV0ZSgnbmFtZScsICdjb25maXJtLXBhc3N3b3JkJyk7XG5cbiAgICByZXR1cm4gY29uZmlybVBhc3N3b3JkSW5wdXQ7XG59XG5cbmV4cG9ydCB7IGNvbmZpcm1QYXNzd29yZElucHV0IH07IiwiZnVuY3Rpb24gc3VibWl0QnV0dG9uKGJ1dHRvblRleHQpIHtcbiAgICBjb25zdCBzdWJtaXRCdXR0b24gPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdidXR0b24nKTtcbiAgICBcbiAgICBzdWJtaXRCdXR0b24uc2V0QXR0cmlidXRlKCd0eXBlJywgJ3N1Ym1pdCcpO1xuICAgIHN1Ym1pdEJ1dHRvbi50ZXh0Q29udGVudCA9IGJ1dHRvblRleHQ7XG4gICAgXG4gICAgcmV0dXJuIHN1Ym1pdEJ1dHRvbjtcbn1cblxuZXhwb3J0IHsgc3VibWl0QnV0dG9uIH07Il0sIm5hbWVzIjpbIl9fX0NTU19MT0FERVJfRVhQT1JUX19fIiwicHVzaCIsIm1vZHVsZSIsImlkIiwiZXhwb3J0cyIsImNzc1dpdGhNYXBwaW5nVG9TdHJpbmciLCJsaXN0IiwidG9TdHJpbmciLCJ0aGlzIiwibWFwIiwiaXRlbSIsImNvbnRlbnQiLCJuZWVkTGF5ZXIiLCJjb25jYXQiLCJsZW5ndGgiLCJqb2luIiwiaSIsIm1vZHVsZXMiLCJtZWRpYSIsImRlZHVwZSIsInN1cHBvcnRzIiwibGF5ZXIiLCJ1bmRlZmluZWQiLCJhbHJlYWR5SW1wb3J0ZWRNb2R1bGVzIiwiayIsIl9rIiwiY3NzTWFwcGluZyIsImJ0b2EiLCJiYXNlNjQiLCJ1bmVzY2FwZSIsImVuY29kZVVSSUNvbXBvbmVudCIsIkpTT04iLCJzdHJpbmdpZnkiLCJkYXRhIiwic291cmNlTWFwcGluZyIsInN0eWxlc0luRE9NIiwiZ2V0SW5kZXhCeUlkZW50aWZpZXIiLCJpZGVudGlmaWVyIiwicmVzdWx0IiwibW9kdWxlc1RvRG9tIiwib3B0aW9ucyIsImlkQ291bnRNYXAiLCJpZGVudGlmaWVycyIsImJhc2UiLCJjb3VudCIsImluZGV4QnlJZGVudGlmaWVyIiwib2JqIiwiY3NzIiwic291cmNlTWFwIiwicmVmZXJlbmNlcyIsInVwZGF0ZXIiLCJhZGRFbGVtZW50U3R5bGUiLCJieUluZGV4Iiwic3BsaWNlIiwiYXBpIiwiZG9tQVBJIiwidXBkYXRlIiwibmV3T2JqIiwicmVtb3ZlIiwibGFzdElkZW50aWZpZXJzIiwibmV3TGlzdCIsImluZGV4IiwibmV3TGFzdElkZW50aWZpZXJzIiwiX2kiLCJfaW5kZXgiLCJtZW1vIiwiaW5zZXJ0Iiwic3R5bGUiLCJ0YXJnZXQiLCJzdHlsZVRhcmdldCIsImRvY3VtZW50IiwicXVlcnlTZWxlY3RvciIsIndpbmRvdyIsIkhUTUxJRnJhbWVFbGVtZW50IiwiY29udGVudERvY3VtZW50IiwiaGVhZCIsImUiLCJnZXRUYXJnZXQiLCJFcnJvciIsImFwcGVuZENoaWxkIiwiZWxlbWVudCIsImNyZWF0ZUVsZW1lbnQiLCJzZXRBdHRyaWJ1dGVzIiwiYXR0cmlidXRlcyIsInN0eWxlRWxlbWVudCIsIm5vbmNlIiwic2V0QXR0cmlidXRlIiwiaW5zZXJ0U3R5bGVFbGVtZW50Iiwic3R5bGVUYWdUcmFuc2Zvcm0iLCJhcHBseSIsInBhcmVudE5vZGUiLCJyZW1vdmVDaGlsZCIsInJlbW92ZVN0eWxlRWxlbWVudCIsInN0eWxlU2hlZXQiLCJjc3NUZXh0IiwiZmlyc3RDaGlsZCIsImNyZWF0ZVRleHROb2RlIiwiX193ZWJwYWNrX21vZHVsZV9jYWNoZV9fIiwiX193ZWJwYWNrX3JlcXVpcmVfXyIsIm1vZHVsZUlkIiwiY2FjaGVkTW9kdWxlIiwiX193ZWJwYWNrX21vZHVsZXNfXyIsIm4iLCJnZXR0ZXIiLCJfX2VzTW9kdWxlIiwiZCIsImEiLCJkZWZpbml0aW9uIiwia2V5IiwibyIsIk9iamVjdCIsImRlZmluZVByb3BlcnR5IiwiZW51bWVyYWJsZSIsImdldCIsInByb3AiLCJwcm90b3R5cGUiLCJoYXNPd25Qcm9wZXJ0eSIsImNhbGwiLCJuYyIsImlucHV0TGFiZWwiLCJpbnB1dEVsZW1lbnQiLCJsYWJlbFRleHQiLCJnZXRBdHRyaWJ1dGUiLCJ0ZXh0Q29udGVudCIsImlucHV0U3BhbiIsImxvY2FscyIsImZvcm0iLCJub1ZhbGlkYXRlIiwiZW1haWxJbnB1dERpdiIsImVtYWlsIiwiZW1haWxJbnB1dCIsImNvdW50cnlJbnB1dERpdiIsImNvdW50cnkiLCJjb3VudHJ5SW5wdXQiLCJsaXN0T2ZDb3VudHJpZXMiLCJkYXRhbGlzdCIsImZvckVhY2giLCJvcHRpb24iLCJjb3VudHJ5TGlzdCIsInBvc3RhbENvZGVEaXYiLCJwb3N0YWxDb2RlIiwicG9zdGFsQ29kZUlucHV0IiwicGFzc3dvcmREaXYiLCJwYXNzd29yZCIsInBhc3N3b3JkSW5wdXQiLCJjb25maXJtUGFzc3dvcmREaXYiLCJjb25maXJtUGFzc3dvcmQiLCJjb25maXJtUGFzc3dvcmRJbnB1dCIsImNvbmZpcm1QYXNzd29yZFNwYW4iLCJhZGRFdmVudExpc3RlbmVyIiwidmFsdWUiLCJjbGFzc05hbWUiLCJzdWJtaXQiLCJidXR0b25UZXh0Iiwic3VibWl0QnV0dG9uIl0sInNvdXJjZVJvb3QiOiIifQ==